<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hbm.Api.Common</name>
    </assembly>
    <members>
        <member name="T:Hbm.Api.Common.Core.DeviceFamilyPluginManager">
            <summary>
            Plugin Manager for all DeviceFamily implementations 
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.DeviceFamilyPluginManager.GetDeviceImplementations">
            <summary>
            Returns all found DeviceFamily implementations
            </summary>
            <remarks>Searches for DLL in the application folder which implements DeviceFamily</remarks>
            <returns>List of found DeviceFamily implementations</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.DeviceFamilyPluginManager.GetPlugInAssemblies(System.String)">
            <summary>
            Returns a list of instances for all assemblies in the plug-in directory
            which are listed in the device-driver plug-in configuration file.
            </summary>
            <param name="plugInDirectory">Plug-in directory name.</param>
            <returns>List of assembly instances. Returns an empty list if no assemblies are available.</returns>
        </member>
        <member name="T:Hbm.Api.Common.Entities.DeviceErrorStatus">
            <summary>
            Represents one error status information of a device.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceErrorStatus.#ctor">
            <summary>
            Initializes a new (empty) instance of the <see cref="T:Hbm.Api.Common.Entities.DeviceErrorStatus"/> class.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceErrorStatus.#ctor(System.Int32,Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.Common.Entities.Signals.Signal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.Common.Entities.DeviceErrorStatus"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="connector">The connector (<c>null</c> when not on connector level).</param>
            <param name="channel">The channel (<c>null</c> when not on channel level).</param>
            <param name="signal">The signal (<c>null</c> when not on signal level).</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceErrorStatus.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance (format "&lt;class-name&gt; (&lt;hierachical-type&gt; &lt;unique-id&gt;) {#&lt;error-number&gt; - &lt;message-text&gt;}").
            </returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.DeviceErrorStatus.ErrorCode">
            <summary>
            Gets the error code (device specific).
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.DeviceErrorStatus.Connector">
            <summary>
            Gets the connector with this error status.
            </summary>
            <remarks>May be <c>null</c> when on another hierarchical level.</remarks>
        </member>
        <member name="P:Hbm.Api.Common.Entities.DeviceErrorStatus.Channel">
            <summary>
            Gets the channel with this error status.
            </summary>
            <remarks>May be <c>null</c> when on another hierarchical level.</remarks>
        </member>
        <member name="P:Hbm.Api.Common.Entities.DeviceErrorStatus.Signal">
            <summary>
            Gets the signal with this error status.
            </summary>
            <remarks>May be <c>null</c> when on another hierarchical level.</remarks>
        </member>
        <member name="P:Hbm.Api.Common.Entities.DeviceErrorStatus.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.DeviceStatus">
            <summary>
            Represents one status information of a device.
            </summary>
            <remarks>
            A subclass should at least realize a property <c>Value</c> (normally an enumeration type)
            which contains the value of the status.<para/>
            Further sub classing should realize a property <c>DeviceSpecificValue</c> and set the
            base class <c>Value = MyEnum.DeviceSpecific</c> as an indicator
            (see <see cref="T:Hbm.Api.Common.Entities.Statuses.ChannelTedsStatus"/> and its subclass in
            the QuantumX driver).
            </remarks>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceStatus.#ctor">
            <summary>
            Initializes a new (empty) instance of the <see cref="T:Hbm.Api.Common.Entities.DeviceStatus"/> class.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceStatus.#ctor(System.Int32,Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.Common.Entities.Signals.Signal)">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.Common.Entities.DeviceStatus"/> class.
            </summary>
            <param name="originalID">The original identifier of the status.</param>
            <param name="connector">The connector (<c>null</c> when not on connector level).</param>
            <param name="channel">The channel (<c>null</c> when not on channel level).</param>
            <param name="signal">The signal (<c>null</c> when not on signal level).</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceStatus.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance (format "&lt;class-name&gt; (&lt;hierachical-type&gt; &lt;unique-id&gt;) {Value = &lt;value-as-string&gt;}").
            </returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceStatus.GetPropertyValueAsString(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the value of the specified property as string.
            </summary>
            <param name="statusClassType">Type of the class to look for the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="isNullWhenPropertyNotFound">If set to <c>true</c> returns <c>null</c> when property not found.</param>
            <returns>The property value as string.</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.DeviceStatus.OriginalID">
            <summary>
            Gets the original identifier of the status (device specific).
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.DeviceStatus.Connector">
            <summary>
            Gets the connector with this status.
            </summary>
            <remarks>May be <c>null</c> when on another hierarchical level.</remarks>
        </member>
        <member name="P:Hbm.Api.Common.Entities.DeviceStatus.Channel">
            <summary>
            Gets the channel with this status.
            </summary>
            <remarks>May be <c>null</c> when on another hierarchical level.</remarks>
        </member>
        <member name="P:Hbm.Api.Common.Entities.DeviceStatus.Signal">
            <summary>
            Gets the signal with this status.
            </summary>
            <remarks>May be <c>null</c> when on another hierarchical level.</remarks>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Channels.AnalogOutChannel">
            <summary>
            A channel for analog output connectors.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Channels.Channel">
            <summary>
            Logical view of sensor signals
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Channels.Channel.#ctor">
            <summary>
            Creates new instance of class
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Channels.Channel.GetUniqueID">
            <summary>
            Returns a unique string that identifies the channel among the device to which the channel belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique channel identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.Channel.Name">
            <summary>
            Name of the channel
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.Channel.Signals">
            <summary>
            Measurement signals delivered by the connected sensor.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Channels.IInputSignalReference">
            <summary>
            Interface for all output channels on which input signals are supported.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.IInputSignalReference.InputModuleReference">
            <summary>
            Unique (device family dependent) reference of the module to which the input signal belongs.
            It should be empty, if no input signal exists or if the input signal source is on the same device.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.IInputSignalReference.InputSignalReference">
            <summary>
            Unique (device family dependent) reference to the input signal of the output channel. 
            If the signal comes from another module, also set the module reference (<see cref="P:Hbm.Api.Common.Entities.Channels.IInputSignalReference.InputModuleReference"/>).
            It should be empty, if no input signal exists.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Channels.IUnit">
            <summary>
            Interface for all channels on which unit is not located under sensor/scaling.
            At present this interface is used for <see cref="T:Hbm.Api.Common.Entities.Channels.VirtualChannel"/>, <see cref="T:Hbm.Api.Common.Entities.Channels.DigitalChannel"/>,
            <see cref="T:Hbm.Api.Common.Entities.Channels.AnalogOutChannel"/> and <see cref="T:Hbm.Api.Common.Entities.Channels.CanOutChannel"/>.
            Do not cast channels directly to this interface to get the unit since not all channel types 
            realize this interface. 
            Please use <see cref="M:Hbm.Api.Common.Entities.Device.SetUnit(Hbm.Api.Common.Entities.Channels.Channel,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)"/> and 
            <see cref="M:Hbm.Api.Common.Entities.Device.GetUnit(Hbm.Api.Common.Entities.Channels.Channel)"/>  to set or get the unit of a channel directly.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.IUnit.Unit">
            <summary>
            Unit of the channel
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.AnalogOutChannel.InputModuleReference">
            <summary>
            Unique (device family dependent) reference of the module to which the input signal belongs.
            It should be empty, if no input signal exists or if the input signal source is on the same device.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.AnalogOutChannel.InputSignalReference">
            <summary>
            Unique (device family dependent) reference to the input signal of the output channel. 
            If the signal comes from another module, also set the module reference (<see cref="P:Hbm.Api.Common.Entities.Channels.AnalogOutChannel.InputModuleReference"/>).
            It should be empty, if no input signal exists.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.AnalogOutChannel.Unit">
            <summary>
            Unit of the channel
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Channels.CanInChannel">
            <summary>
            An input channel for CAN connectors, configured by a <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor"/>
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.CanInChannel.IsActivated">
            <summary>
            Enables (or disables) the channel
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.CanInChannel.Sensor">
            <summary>
            Parametrization info for a sensor, which is connected via CAN bus. 
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Channels.CanOutChannel">
            <summary>
            An output channel for CAN connectors.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.CanOutChannel.Unit">
            <summary>
            Unit of the channel
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.CanOutChannel.IsActivated">
            <summary>
            Enables (or disables) the channel
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Channels.DigitalChannel">
            <summary>
            A channel for digital connectors.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.DigitalChannel.Unit">
            <summary>
            Unit of the channel
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.ConnectionInfos.EthernetConnectionInfo">
            <summary>
            Information about the ethernet connection for a device
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.ConnectionInfos.ConnectionInfo">
            <summary>
            Abstract base class of all concrete connection info implementations
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.ConnectionInfos.EthernetConnectionInfo.#ctor">
            <summary>
            Creates new instance
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.ConnectionInfos.EthernetConnectionInfo.#ctor(System.String,System.Int32)">
            <summary>
            Creates new instance with given parameters
            </summary>
            <param name="ipAddress">IP address of the device</param>
            <param name="port">Port for connecting the device</param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.ConnectionInfos.EthernetConnectionInfo.IpAddress">
            <summary>
            IP address. Either ip4 or ip6 version
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.ConnectionInfos.EthernetConnectionInfo.Port">
            <summary>
            Port on which the hbmProtocol protocol (for direct connection to the device) is running on
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Connectors.AnalogOutConnector">
            <summary>
            Represents an analog output connector.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Connectors.Connector">
            <summary>
            Represents a physical device connector
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Connectors.Connector.#ctor">
            <summary>
            Creates a new instance of the class and initialize needed variables
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Connectors.Connector.GetUniqueID">
            <summary>
            Returns a unique string that identifies the connector among the device to which the connector belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique connector identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Connectors.Connector.LocationHint">
            <summary>
            Human readable description of connector position
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Connectors.Connector.Channels">
            <summary>
            Logical view of connected sensors, e.g. CAN
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Connectors.DigitalConnector">
            <summary>
            Represents a digital input or output connector (depending on the value of property <see cref="P:Hbm.Api.Common.Entities.Connectors.DigitalConnector.Direction"/>)
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Connectors.DigitalConnector.Direction">
            <summary>
            Direction of the connector
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Filters.ButterworthFirFilter">
            <summary>
            The Butterworth FIR (Finite Impulse Response) filter is a type of signal processing filter, designed to have a frequency response as flat 
            as possible in the band-pass. It is also referred to as a maximally flat magnitude filter.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Filters.Filter">
            <summary>
            Filters are used to smooth noisy experimental data. 
            Depending on the chosen principle, the filtered output differs in amplitude and time dependent behavior.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Filters.Filter.Frequency">
            <summary>
            Filter frequency
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Filters.ButterworthFirFilter.ToString">
            <summary>
            Converts the name and frequency of the filter into a human readable string representation, e.g. Butterworth FIR, 10 Hz
            </summary>
            <returns>Converted and concatenated filter string</returns>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Filters.LinearPhaseFilter">
            <summary>
            The linear phase FIR (Finite Impulse Response) filter is a type of signal processing filter.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Filters.LinearPhaseFilter.ToString">
            <summary>
            Converts the name and frequency of the filter into a human readable string representation, e.g. LinearPhase, 50 Hz
            </summary>
            <returns>Converted and concatenated filter string</returns>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Filters.NotSupportedFilter">
            <summary>
            Not supported filter is used to indicate, that an unknown filter is set in the device.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Filters.NotSupportedFilter.#ctor">
            <summary>
            Creates new instance
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Filters.NotSupportedFilter.ToString">
            <summary>
            Converts the name and frequency of the filter into a human readable string representation
            </summary>
            <returns>Filter string</returns>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Problems.CommunicationFailedError">
            <summary>
            Class that describes a communication failed error that occurred during the
            usage of a device.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Problems.Error">
            <summary>
            Class that describes an error that occurred during the
            usage of a device.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Problems.Problem">
            <summary>
            Class that describes a problem that occurred during the
            usage of a device.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Problem.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the problem</param>
            <param name="settingType">Type of the object that causes the problem</param>
            <param name="propertyName">Name of the property that caused the problem</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Problem.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the problem</param>
            <param name="connector">Connector that caused the problem</param>
            <param name="settingType">Type of the object that causes the problem</param>
            <param name="propertyName">Name of the property that caused the problem</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Problem.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the problem</param>
            <param name="channel">Channel that caused the problem</param>
            <param name="settingType">Type of the object that causes the problem</param>
            <param name="propertyName">Name of the property that caused the problem</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Problem.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the problem</param>
            <param name="signal">Signal that caused the problem</param>
            <param name="settingType">Type of the object that causes the problem</param>
            <param name="propertyName">Name of the property that caused the problem</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Problem.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the problem</param>
            <param name="sensor">Sensor that caused the problem</param>
            <param name="settingType">Type of the object that causes the problem</param>
            <param name="propertyName">Name of the property that caused the problem</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Problem.GetPosition">
            <summary>
            Returns a path description to the position where a problem appeared.
            As soon as the path to the position has missing parts the description ends.
            E.g.: DeviceUniqueId, ConnectorUniqueId, SignalUniqueID are set =>
            Path contains DeviceUniqueId/ConnectorUniqueId only since ChannelUniqueId is missing!
            </summary>
            <returns>Path to the position where the problem occurred</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Problem.Message">
            <summary>
            Message that describes the problem
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Problem.DeviceUniqueID">
            <summary>
            Unique identification of the device that caused the problem
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Problem.ConnectorUniqueID">
            <summary>
            Unique identification of the connector that caused the problem
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Problem.ChannelUniqueID">
            <summary>
            Unique identification of the channel that caused the problem
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Problem.SignalUniqueID">
            <summary>
            Unique identification of the signal that caused the problem
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Problem.SensorUniqueID">
            <summary>
            Unique identification of the sensor that caused the problem
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Problem.SettingType">
            <summary>
            Type of the object that causes the problem
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Problem.OriginalMessage">
            <summary>
            Original problem (error) message generated by the device
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Problem.OriginalContext">
            <summary>
            Original context of the problem generated by the device
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Problem.OriginalErrorCode">
            <summary>
            Original error generated by the device
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Problem.DemandedValue">
            <summary>
            Value that caused a problem
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Problem.PropertyName">
            <summary>
            Name of the property that caused a problem
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Problem.Position">
            <summary>
            Position at which the problem occurred
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Error.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Error.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="connector">Connector that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Error.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="channel">Channel that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Error.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="signal">Signal that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Error.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="sensor">Sensor that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Error.GetMessage">
            <summary>
            Generates a message that describes the error
            </summary>
            <returns>Message that describes the error</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Error.Message">
            <summary>
            Message that describes the error
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.CommunicationFailedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.CommunicationFailedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="connector">Connector that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.CommunicationFailedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="channel">Channel that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.CommunicationFailedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="signal">Signal that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.CommunicationFailedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="sensor">Sensor that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.CommunicationFailedError.GetMessage">
            <summary>
            Generates a message that describes the error
            </summary>
            <returns>Message that describes the error</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.CommunicationFailedError.Message">
            <summary>
            Message that describes the error
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Problems.ProblemExtension">
            <summary>
            Extension class providing extra methods for objects of type <see cref="T:Hbm.Api.Common.Entities.Problems.Problem"/>
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ProblemExtension.BuildReadableString(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.Boolean,System.Boolean)">
            <summary>
            Builds a readable list of problems including line breaks;
            </summary>
            <param name="problems">The list of problems.</param>
            <param name="containWarnings">Determines if the return values should contain warnings.</param>
            <param name="containErrors">Determines if the return values should contain errors.</param>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Problems.OperationFailedError">
            <summary>
            Class that describes an operation failed error that occurred during the
            usage of a device.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.OperationFailedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.OperationFailedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="connector">Connector that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.OperationFailedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="channel">Channel that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.OperationFailedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="signal">Signal that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.OperationFailedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="sensor">Sensor that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.OperationFailedError.GetMessage">
            <summary>
            Generates a message that describes the error
            </summary>
            <returns>Message that describes the error</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.OperationFailedError.Message">
            <summary>
            Message that describes the error
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Problems.ProblemListExtension">
            <summary>
            Extension methods as helper for problem lists of type List&lt;<see cref="T:Hbm.Api.Common.Entities.Problems.Problem"/>&gt;.
            </summary>
            <remarks>
            The extension methods are automatically throwing a <see cref="T:System.NullReferenceException"/> if the used list is <c>null</c>, 
            so no argument checking is required.
            </remarks>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ProblemListExtension.IsEmpty(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Checks, if the problem list is empty.
            </summary>
            <param name="problemlist">Given list of problem on which the method is called</param>
            <returns><c>true</c> if the list of problem is empty, else <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="problemlist"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ProblemListExtension.HasError(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Checks, if the problem list contains one or more errors.
            </summary>
            <param name="problemlist">Given list of problem on which the method is called</param>
            <returns><c>true</c> if the list of problem contains one or more errors, else <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ProblemListExtension.HasWarning(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Checks, if the problem list contains one or more warnings.
            </summary>
            <param name="problemlist">Given list of problem on which the method is called</param>
            <returns><c>true</c> if the list of problem contains one or more warnings, else <c>false</c></returns>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Problems.TypeNotSupportedError">
            <summary>
            Class that describes a type not supported error that occurred during the
            usage of a device.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.TypeNotSupportedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="demandedValue">Demanded type that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.TypeNotSupportedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="connector">Connector that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="demandedValue">Demanded type that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.TypeNotSupportedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="channel">Channel that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="demandedValue">Demanded type that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.TypeNotSupportedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="signal">Signal that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="demandedValue">Demanded type that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.TypeNotSupportedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="sensor">Sensor that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="demandedValue">Demanded type that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.TypeNotSupportedError.GetMessage">
            <summary>
            Generates a message that describes the error
            </summary>
            <returns>Message that describes the error</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.TypeNotSupportedError.Message">
            <summary>
            Message that describes the error
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Problems.UnexpectedError">
            <summary>
            Class that describes an unexpected error that occurred during the
            usage of a device.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.UnexpectedError.#ctor(Hbm.Api.Common.Entities.Device,System.Exception,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="exception">Exception that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.UnexpectedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Connectors.Connector,System.Exception,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="connector">Connector that caused the error</param>
            <param name="exception">Exception that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.UnexpectedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Channels.Channel,System.Exception,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="channel">Channel that caused the error</param>
            <param name="exception">Exception that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.UnexpectedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal,System.Exception,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="signal">Signal that caused the error</param>
            <param name="exception">Exception that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.UnexpectedError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.SensorDB.Entities.Sensor,System.Exception,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="sensor">Sensor that caused the error</param>
            <param name="exception">Exception that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.UnexpectedError.GetMessage">
            <summary>
            Generates a message that describes the error
            </summary>
            <returns>Message that describes the error</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.UnexpectedError.Exception">
            <summary>
            Unexpected exception that occurred during the interaction with a device
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.UnexpectedError.Message">
            <summary>
            Message that describes the error
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Problems.ValueAdaptedWarning">
            <summary>
            Class that describes the adaptation of a specific value 
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Problems.Warning">
            <summary>
            Class that describes a warning that occurred during the
            usage of a device.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Warning.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the warning</param>
            <param name="settingType">Type of the object that caused the warning</param>
            <param name="propertyName">Name of the property that caused the warning</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Warning.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the warning</param>
            <param name="connector">Connector that caused the warning</param>
            <param name="settingType">Type of the object that caused the warning</param>
            <param name="propertyName">Name of the property that caused the warning</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Warning.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the warning</param>
            <param name="channel">Channel that caused the warning</param>
            <param name="settingType">Type of the object that caused the warning</param>
            <param name="propertyName">Name of the property that caused the warning</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Warning.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the warning</param>
            <param name="signal">Signal that caused the warning</param>
            <param name="settingType">Type of the object that caused the warning</param>
            <param name="propertyName">Name of the property that caused the warning</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Warning.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Enums.SettingType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the warning</param>
            <param name="sensor">Sensor that caused the warning</param>
            <param name="settingType">Type of the object that caused the warning</param>
            <param name="propertyName">Name of the property that caused the warning</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.Warning.GetMessage">
            <summary>
            Generates a message that describes the warning
            </summary>
            <returns>Message that describes the error</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.Warning.Message">
            <summary>
            Message that describes the warning
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueAdaptedWarning.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Enums.SettingType,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the warning</param>
            <param name="settingType">Type of the object that causes the warning</param>
            <param name="propertyName">Name of the property that caused the warning</param>
            <param name="demandedValue">Demanded value that caused a problem</param>
            <param name="realizedValue">Value that has been set instead of the <see cref="P:Hbm.Api.Common.Entities.Problems.Problem.DemandedValue"/></param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueAdaptedWarning.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.SettingType,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the warning</param>
            <param name="connector">Connector that caused the warning</param>
            <param name="settingType">Type of the object that causes the warning</param>
            <param name="propertyName">Name of the property that caused the warning</param>
            <param name="demandedValue">Demanded value that caused a problem</param>
            <param name="realizedValue">Value that has been set instead of the <see cref="P:Hbm.Api.Common.Entities.Problems.Problem.DemandedValue"/></param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueAdaptedWarning.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.Common.Enums.SettingType,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the warning</param>
            <param name="channel">Channel that caused the warning</param>
            <param name="settingType">Type of the object that causes the warning</param>
            <param name="propertyName">Name of the property that caused the warning</param>
            <param name="demandedValue">Demanded value that caused a problem</param>
            <param name="realizedValue">Value that has been set instead of the <see cref="P:Hbm.Api.Common.Entities.Problems.Problem.DemandedValue"/></param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueAdaptedWarning.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal,Hbm.Api.Common.Enums.SettingType,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the warning</param>
            <param name="signal">Signal that caused the warning</param>
            <param name="settingType">Type of the object that causes the warning</param>
            <param name="propertyName">Name of the property that caused the warning</param>
            <param name="demandedValue">Demanded value that caused a problem</param>
            <param name="realizedValue">Value that has been set instead of the <see cref="P:Hbm.Api.Common.Entities.Problems.Problem.DemandedValue"/></param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueAdaptedWarning.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Enums.SettingType,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the warning</param>
            <param name="sensor">Sensor that caused the warning</param>
            <param name="settingType">Type of the object that causes the warning</param>
            <param name="propertyName">Name of the property that caused the warning</param>
            <param name="demandedValue">Demanded value that caused a problem</param>
            <param name="realizedValue">Value that has been set instead of the <see cref="P:Hbm.Api.Common.Entities.Problems.Problem.DemandedValue"/></param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueAdaptedWarning.GetMessage">
            <summary>
            Generates a message that describes the warning
            </summary>
            <returns>Message that describes the error</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.ValueAdaptedWarning.RealizedValue">
            <summary>
            Value that has been set instead of the <see cref="P:Hbm.Api.Common.Entities.Problems.Problem.DemandedValue"/>
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.ValueAdaptedWarning.Message">
            <summary>
            Message that describes the warning
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Problems.ValueNotSetError">
            <summary>
            Class that describes a value not set error that occurred during the
            usage of a device.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueNotSetError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Enums.SettingType,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
            <param name="demandedValue">Value that could not be set</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueNotSetError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.SettingType,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="connector">Connector that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
            <param name="demandedValue">Value that could not be set</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueNotSetError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.Common.Enums.SettingType,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="channel">Channel that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
            <param name="demandedValue">Value that could not be set</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueNotSetError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal,Hbm.Api.Common.Enums.SettingType,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="signal">Signal that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
            <param name="demandedValue">Value that could not be set</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueNotSetError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Enums.SettingType,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="sensor">Sensor that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
            <param name="demandedValue">Value that could not be set</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueNotSetError.GetMessage">
            <summary>
            Generates a message that describes the error
            </summary>
            <returns>Message that describes the error</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.ValueNotSetError.Message">
            <summary>
            Message that describes the error
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Problems.ValueOutOfRangeError">
            <summary>
            Class that describes an out of range error that occurred during the
            usage of a device.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueOutOfRangeError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Enums.SettingType,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
            <param name="demandedValue">Value that could not be set</param>
            <param name="minPossibleValue">Minimal possible value</param>
            <param name="maxPossibleValue">Maximal possible value</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueOutOfRangeError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.SettingType,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="connector">Connector that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
            <param name="demandedValue">Value that could not be set</param>
            <param name="minPossibleValue">Minimal possible value</param>
            <param name="maxPossibleValue">Maximal possible value</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueOutOfRangeError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.Common.Enums.SettingType,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="channel">Channel that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
            <param name="demandedValue">Value that could not be set</param>
            <param name="minPossibleValue">Minimal possible value</param>
            <param name="maxPossibleValue">Maximal possible value</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueOutOfRangeError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal,Hbm.Api.Common.Enums.SettingType,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="signal">Signal that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
            <param name="demandedValue">Value that could not be set</param>
            <param name="minPossibleValue">Minimal possible value</param>
            <param name="maxPossibleValue">Maximal possible value</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueOutOfRangeError.#ctor(Hbm.Api.Common.Entities.Device,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Enums.SettingType,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device">Device that caused the error</param>
            <param name="sensor">Sensor that caused the error</param>
            <param name="settingType">Type of the object that caused the error</param>
            <param name="propertyName">Name of the property that caused the error</param>
            <param name="demandedValue">Value that could not be set</param>
            <param name="minPossibleValue">Minimal possible value</param>
            <param name="maxPossibleValue">Maximal possible value</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Problems.ValueOutOfRangeError.GetMessage">
            <summary>
            Generates a message that describes the error
            </summary>
            <returns>Message that describes the error</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.ValueOutOfRangeError.MaxPossibleValue">
            <summary>
            Maximal possible value
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.ValueOutOfRangeError.MinPossibleValue">
            <summary>
            Minimal possible value
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Problems.ValueOutOfRangeError.Message">
            <summary>
            Message that describes the error
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Scalings.OutputScalingPoint">
            <summary>
            Represents a single output scaling point
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Scalings.OutputScalingPoint.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Scalings.OutputScalingPoint.#ctor(System.Decimal,System.Decimal)">
            <summary>
             Create a new instance and initialize values.
            </summary>
            <param name="x">x value</param>
            <param name="y">y value</param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Scalings.OutputScalingPoint.X">
            <summary>
            X value of the point
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Scalings.OutputScalingPoint.Y">
            <summary>
            Y value of the point
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Scalings.NotSupportedOutputScaling">
            <summary>
            Represents a not supported output scaling
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Scalings.OutputScaling">
            <summary>
            Represents the scaling of analog output signals
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Scalings.OutputScaling.ScalingType">
            <summary>
            Type of the scaling (read only)
            </summary>
            <remarks>
            Must be implemented by derived classes
            </remarks>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Scalings.OutputScaling.ElectricalUnit">
            <summary>
            Electrical unit (e.g. "V").
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Scalings.NotSupportedOutputScaling.ScalingType">
            <summary>
            Type of the output scaling (read only)
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Scalings.OutputTableScaling">
            <summary>
            Represents a table scaling for analog output signals
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Scalings.OutputTableScaling.#ctor">
            <summary>
            Create a new instance an initialize list of scaling points
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Scalings.OutputTableScaling.#ctor(Hbm.Api.SensorDB.Entities.Scalings.TableScaling)">
            <summary>
            Create a new instance an converts the given sensor table scaling into the new table output scaling
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Scalings.OutputTableScaling.ScalingType">
            <summary>
            Type of the scaling (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Scalings.OutputTableScaling.ScalingPoints">
            <summary>
            List of scaling points representing the scaling table
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Signals.AnalogOutSignal">
            <summary>
            Represents a signal delivered by an analog output. 
            </summary>
            <remarks>
            Analog output signals are marked as not measurable by default.
            </remarks>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Signals.Signal">
            <summary>
            Represents a measurement signal 
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Signals.Signal.#ctor">
            <summary>
            Creates a new instance of the class and initializes variables
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Signals.Signal.GetUniqueID">
            <summary>
            Returns a unique string that identifies the signal among the device to which the signal belongs.
            </summary>
            <remarks>In case of a streamable signal, this method must return the information used by the streaming to identify the signal on the hardware module.
            This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique signal identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Signals.Signal.GetSingleMeasurementValue">
            <summary>
            Returns a single measurement value.
            To update this value you have to use <see cref="M:Hbm.Api.Common.Entities.Device.ReadSingleMeasurementValue(System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})"/>.
            </summary>
            <returns>Single measurement value</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Signals.Signal.SetSingleMeasurementValue(System.Double,System.Double,Hbm.Api.Common.Enums.MeasurementValueState)">
            <summary>
            Sets a single measurement value.        
            Do not use this function, unless you have to write your own driver for a not yet supported device!
            This is for internal use only!
            </summary>
            <param name="timeStamp">Timestamp of the measurement value</param>
            <param name="measurementValue">Measured value</param>
            <param name="state">State of measurement value</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Signals.Signal.SetMeasurementValues(System.Double[],System.Double[],Hbm.Api.Common.Enums.MeasurementValueState[],System.Int32)">
            <summary>
            Adds numberOfValuesToAdd triple (each consisting of one timeStamp, one measurementValue and one state) to the internal circular buffer of the signal.
            Do not use this function, unless you have to write your own driver for a not yet supported device!
            This is for internal use only!
            </summary>
            <param name="timeStamps">Time stamps</param>
            <param name="measurementValues">Measurement values</param>
            <param name="states">Status of the measurement value</param>
            <param name="numberOfValuesToAdd">Number of values to add to internal circular buffer of the signal.</param>
            <exception cref="T:System.ArgumentException">Thrown, if numberOfValuesToAdd is less than 0.</exception>   
            <exception cref="T:System.ArgumentException">Thrown, if size of timeStamps, measurementValues or states is less than numberOfValuesToAdd.</exception> 
            <exception cref="T:System.ArgumentNullException">Thrown, if timeStamps, measurementValues or states is null.</exception>        
        </member>
        <member name="M:Hbm.Api.Common.Entities.Signals.Signal.SetMeasurementValues(System.Double[],System.Double[],Hbm.Api.Common.Enums.MeasurementValueState[])">
            <summary>
            Adds the given, same sized! arrays (of timeStamps, measurementValues and states) to the internal circular buffer of the signal.
            Do not use this function, unless you have to write your own driver for a not yet supported device!
            This is for internal use only!
            </summary>
            <param name="timeStamps">Time stamps</param>
            <param name="measurementValues">Measurement values</param>
            <param name="states">Status of the measurement value</param>
            <exception cref="T:System.ArgumentException">Thrown, if arrays are not of the same size.</exception>   
            <exception cref="T:System.ArgumentNullException">Thrown, if timeStamps, measurementValues or states is null.</exception>        
        </member>
        <member name="M:Hbm.Api.Common.Entities.Signals.Signal.SetMeasurementValues(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Hbm.Api.Common.Enums.MeasurementValueState})">
            <summary>
            Adds the given, same sized! lists (of timeStamps, measurementValues and states) to the internal circular buffer of the signal.
            Do not use this function, unless you have to write your own driver for a not yet supported device!
            This is for internal use only!
            </summary>
            <param name="timeStamps">Time stamps</param>
            <param name="measurementValues">Measurement values</param>
            <param name="states">Status of the measurement value</param>
            <exception cref="T:System.ArgumentException">Thrown, if lists are not of the same size.</exception>   
            <exception cref="T:System.ArgumentNullException">Thrown, if timeStamps, measurementValues or states is null.</exception>        
        </member>
        <member name="M:Hbm.Api.Common.Entities.Signals.Signal.InitBuffers(System.Int32,System.Int32)">
            <summary>
            Initializes the internal circular buffer.
            Do not use this function, unless you have to write your own driver for a not yet supported device that needs
            special adjustments concerning the circular buffer.
            This is for internal use only!
            </summary>
            <remarks>If you want to set the number of buffered values explicitly, set buffer timeout to 0 and min numbers of buffered values to demanded value.</remarks>
            <param name="bufferTimeout">Timeout in ms (buffer is allocated according to the samplerate of the signal and the given timeout)</param>
            <param name="minNumberOfBufferedValues">Minimum number of values to buffer in the circular buffer (default is 1000).</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Signals.Signal.InitContinuousMeasurementValues(System.Boolean,System.Boolean)">
            <summary>
            Initializes the internal continuos measurement values.
            This method is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.Signal.Name">
            <summary>
            Name of the signal
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.Signal.IsMeasurable">
            <summary>
            Indicates, if the signal could be part of a measurement 
            (e.g. by using <see cref="T:Hbm.Api.Common.DaqMeasurement"/> 
            or <see cref="M:Hbm.Api.Common.Entities.Device.ReadSingleMeasurementValue(System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})"/>).
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.Signal.ContinuousMeasurementValues">
            <summary>
            Returns multiple measurement values gained through running measurement, e.g. streaming
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.Signal.SynchronMode">
            <summary>
            Defines the way the signal delivers measurement values. This may either be in an equidistant way 
            (number of measurement vales within a second = sample rate) or in an non-equidistant way ( measurement
            values will be delivered at any, not predictable time)
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.Signal.HasSampleRate">
            <summary>
            Returns true if the signal uses a sample rate. 
            </summary>
            <remarks>Asynchronous signals (like <c>CanSignal</c>s may also have a sample rate. This may happen, if 
            these signals will be sampled by the device itself, to meet a fix sample rate instead of unpredictable timestamps</remarks>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.Signal.SampleRate">
            <summary>
            Sample rate that is used to gather measurement values during a continuous measurement
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.Signal.CircularBuffer">
            <summary>
            Circular buffer. This is used to temporally store measurement values. 
            Do not access CircularBuffer directly unless you have to write your own driver for a not yet supported device!
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.Signal.ExcludeFromDaqTimeout">
            <summary>
            Timeout in ms until this signal has to deliver measurement values during a running continuous measurement.
            If there are no new measurement values during this time, the signal will be ignored during the 
            currently running measurement.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.Signal.IdleTime">
            <summary>
            Time in ms since the last receipt of a measurement value during a running continous measurement.
            If IdleTime &gt;= ExcludeFromDaqTimeout and still no measurement value received <see cref="P:Hbm.Api.Common.Entities.Signals.Signal.IsExcludedFromDaq"/> will be
            set to true and the signal will be ignored during the currently running measurement.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.Signal.IsExcludedFromDaq">
            <summary>
            True, if this signal ran into a timeout and should no longer be used within a running continuous measurement.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Signals.IFilterable">
            <summary>
            Interface for all filterable signals. Some signals don't have an associated filter, thus theses signals are not filterable.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.IFilterable.SelectedFilter">
            <summary>
            Filter that is used to filter the measurement values during a continuous measurement
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Signals.AnalogOutSignal.#ctor">
            <summary>
            Creates a new instance of the class and initializes variables
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.AnalogOutSignal.Scaling">
            <summary>
            Scaling that is used to scale the output signal 
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.AnalogOutSignal.SelectedFilter">
            <summary>
            Filter that is used to filter the output signal
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Signals.DigitalCompressedGroupSignal">
            <summary>
            Represents a digital signal that holds n digital compressed signals, that were all fed with the SAME measurement value.
            Thereby the bitmask of a digital compressed signal defines the bit of the measurement value that represents its
            own measurement value.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Signals.DigitalSignal">
            <summary>
            Represents a single digital input or output
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Signals.DigitalCompressedGroupSignal.#ctor(System.Int32,System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.DigitalCompressedSignal})">
            <summary>
            Creates new instance and initializes the list of digital signals for this compression group. 
            </summary>
            <param name="groupNo">Group number of the compression group</param>
            <param name="compressedDigitalSignals"><c>List </c>of digital signals for one compression group</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Signals.DigitalCompressedGroupSignal.GetUniqueID">
            <summary>
            Returns a unique string that identifies the first signal among the list of digital compressed signals
            </summary>
            <remarks>In case of a streamable signal, this method must return the information used by the streaming to identify the signal on the hardware module.
            This information should be retrieved during scan or connect.</remarks>
            <returns>Unique signal identification on the device</returns>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.DigitalCompressedGroupSignal.Group">
            <summary>
            Group to which all signals, collected under <cref>DigitalCompressedSignals</cref>, belong.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.DigitalCompressedGroupSignal.DigitalCompressedSignals">
            <summary>
            List of digital compressed signals that all use the measurement values of this signal to calculate their
            own measurement values.
            Typically one bit position of a measurement value of this signal is mapped to one measurement value of 
            a digital compressed signal.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Signals.DigitalCompressedSignal">
            <summary>
            A digital comressed signal is part of a <cfref>DigitalCompressedGroupSignal</cfref> which
            delivers one measurement value for n digital signals. 
            E.g.: A device that delivers one 16 bit value for 16 digital in pins, holds 16 digital 
            compressed input signals, each mapped on one bit of the measurement value 
            (according to its masked bit).
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Signals.DigitalCompressedSignal.DecompressMeasurementValues(Hbm.Api.Common.Entities.Signals.DigitalCompressedGroupSignal)">
            <summary>
            Updates the ContinuousMeasurementValues of this signal according to the ContinuousMeasurementValues of the digitalCompressedGROUPSignal by
            calculating the measurement values for this digital compressed signal according to its masked bit value
            and the measurement values of the digital compressed group signal.
            </summary>
            <param name="digitalCompressedGroupSignal">Signal that holds the measurement values to map (according
            to masked bit value) to the measurement values of this signal</param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.DigitalCompressedSignal.Group">
            <summary>
            Group to which this signal belongs. 
            A group defines a logical compound of digital signals that are actually only one physical signal - e.g. a
            digital in port with n pins that are mapped onto one signal. Each bit of this physical signal belongs to
            another digital signal of the same group.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.DigitalCompressedSignal.MaskedBit">
            <summary>
            Defines the bit of the measurement value that is mapped on this digital signal.
            Possible values are 0 ..31
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.DigitalCompressedSignal.MaskedBitValue">
            <summary>
            Returns the value that corresponds to the masked bit. 
            (E.g.: If the <cref>MaskedBit</cref> is 3, the correspondent value is 2^(3)=8 )
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Statuses.ChannelTedsStatus">
            <summary>
            Represents the TEDS status information of one channel.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Statuses.ChannelTedsStatus.#ctor(System.Int32,Hbm.Api.Common.Enums.TedsValidationValueType,Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.Common.Entities.Statuses.ChannelTedsStatus"/> class.
            </summary>
            <param name="originalID">The original identifier.</param>
            <param name="value">The value.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Statuses.ChannelTedsStatus.Value">
            <summary>
            Gets the value of the status.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Statuses.ChannelOverflowStatus">
            <summary>
            Represents the overflow status information of one channel.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Statuses.ChannelOverflowStatus.#ctor(System.Int32,Hbm.Api.Common.Enums.ChannelOverflowValueType,Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.Common.Entities.Statuses.ChannelOverflowStatus"/> class.
            </summary>
            <param name="originalID">The original identifier.</param>
            <param name="value">The value.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Statuses.ChannelOverflowStatus.Value">
            <summary>
            Gets the value of the status.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Statuses.ConnectorParamBusyStatus">
            <summary>
            Represents the parameterization busy status information of one connector.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Statuses.ConnectorParamBusyStatus.#ctor(System.Int32,Hbm.Api.Common.Enums.ConnectorParamBusyValueType,Hbm.Api.Common.Entities.Connectors.Connector)">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.Common.Entities.Statuses.ConnectorParamBusyStatus"/> class.
            </summary>
            <param name="originalID">The original identifier.</param>
            <param name="value">The value.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Statuses.ConnectorParamBusyStatus.Value">
            <summary>
            Gets the value of the status.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Statuses.ConnectorConnectedStatus">
            <summary>
            Represents the sensor connection status information of one connector.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Statuses.ConnectorConnectedStatus.#ctor(System.Int32,Hbm.Api.Common.Enums.ConnectorConnectedValueType,Hbm.Api.Common.Entities.Connectors.Connector)">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.Common.Entities.Statuses.ConnectorConnectedStatus"/> class.
            </summary>
            <param name="originalID">The original identifier.</param>
            <param name="value">The value.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Statuses.ConnectorConnectedStatus.Value">
            <summary>
            Gets the value of the status.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.TimeSources.AutoTimeSource">
            <summary>
            The device uses its internal synchronization method. 
            You could use this time source e.g. when measuring a number of QuantumX devices that are connected via a FireWire cable, or when measuring a number of MGC or PMX devices using their sync cable. 
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.TimeSources.TimeSource">
            <summary>
            Abstract base class of all concrete time source implementations
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.TimeSources.TimeSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance (format "&lt;class-name&gt; {Value = &lt;value-as-string&gt;}").
            </returns>
        </member>
        <member name="T:Hbm.Api.Common.Entities.TimeSources.EtherCatTimeSource">
            <summary>
            The device uses the Ethernet for Controller and Automation Technology to synchronize with other devices. 
            It achieves clock accuracy in the sub-microsecond range. 
            You could use this time source e.g. when measuring various QuantumX devices, which are not connected via FireWire.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.TimeSources.NotSupportedTimeSource">
            <summary>
            Class that holds the settings for a not supported time synchronization type
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.TimeSources.NtpTimeSource">
            <summary>
            The device uses the Network Time Protocol (NTP) protocol to synchronize its clock throughout a computer network against a given time server. 
            On a local area network, it achieves clock accuracy better than one millisecond. 
            You could use this time source e.g. when measuring a QuantumX and a PMX or a MGC device in parallel.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.TimeSources.NtpTimeSource.#ctor(System.String)">
            <summary>
            Creates new instance with given parameters
            </summary>
            <param name="serverIpAddress">IP address of the NTP time server</param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.TimeSources.NtpTimeSource.ServerIpAddress">
            <summary>
            IP address of the NTP time server
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.TimeSources.PtpTimeSource">
            <summary>
            The device uses the Precision Time Protocol (PTP) protocol to synchronize its clock throughout a computer network. 
            On a local area network, it achieves clock accuracy in the sub-microsecond range. 
            You could use this time source e.g. when measuring various QuantumX devices, which are not connected via FireWire.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.TimeSources.PtpTimeSource.#ctor(Hbm.Api.Common.Enums.DelayMechanism,Hbm.Api.Common.Enums.TransportMode)">
            <summary>
            Creates new instance with given parameters
            </summary>
            <param name="delayMechanism">PTP delay mechanism used to synchronize the device</param>
            <param name="transportMode">PTP transport mode used to synchronize the device</param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.TimeSources.PtpTimeSource.DelayMechanism">
            <summary>
            PTP delay mechanism used to synchronize the device
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.TimeSources.PtpTimeSource.TransportMode">
            <summary>
            PTP transport mode used to synchronize the device
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.CommunicationFailedException">
            <summary>
            Thrown, if the communication with a device results in a failure.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.CommonAPIException">
            <summary>
            Base class for custom exceptions of the common API
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.CommonAPIException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.CommonAPIException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.CommonAPIException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.CommunicationFailedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.CommunicationFailedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.CommunicationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.FamilyNameDuplicateException">
            <summary>
            Thrown, if there is already a registered device family with the given name.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.FamilyNameDuplicateException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.FamilyNameDuplicateException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.FamilyNameDuplicateException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.ParameterizationNotCompletedException">
            <summary>
            Thrown, if a parameterization is still in progress in the device during the start of a measurement.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.ParameterizationNotCompletedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.ParameterizationNotCompletedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error.</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.ParameterizationNotCompletedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error.</param>
            <param name="inner">Inner exception of the error.</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">
            <summary>
            Thrown, if application wants to communicate with a disconnected device 
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DeviceNotConnectedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DeviceNotConnectedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DeviceNotConnectedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.StreamingInitializationFailedException">
            <summary>
            Thrown, if an error occurs during initializing the streaming 
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.StreamingInitializationFailedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.StreamingInitializationFailedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.StreamingInitializationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.StreamingInvalidDataException">
            <summary>
            Thrown, if invalid data is returned during streaming
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.StreamingInvalidDataException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.StreamingInvalidDataException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.StreamingInvalidDataException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.StreamingTimeoutException">
            <summary>
            Thrown, if a timeout occurs during streaming
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.StreamingTimeoutException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.StreamingTimeoutException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.StreamingTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Messaging.ChannelEventArgs">
            <summary>
            Provides the data for channel status events, like <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.ChannelNameChanged"/>
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Messaging.ChannelEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ChannelEventArgs class.
            </summary>
            <param name="uniqueDeviceID">Unique identifier of the channel's device</param>
            <param name="uniqueChannelID">Unique channel identifier (on the device <paramref name="uniqueDeviceID"/>)</param>
        </member>
        <member name="P:Hbm.Api.Common.Messaging.ChannelEventArgs.UniqueDeviceID">
            <summary>
            Unique device ID
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Messaging.ChannelEventArgs.UniqueChannelID">
            <summary>
            Unique channel ID (unique only for the device with <see cref="P:Hbm.Api.Common.Messaging.ChannelEventArgs.UniqueDeviceID"/>)
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Messaging.DeviceEventArgs">
            <summary>
            Provides the data for DeviceStatus events, like <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.DeviceConnected"/>
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Messaging.DeviceEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DeviceEventArgs class.
            </summary>
            <param name="uniqueDeviceID">Unique device identifier</param>
        </member>
        <member name="P:Hbm.Api.Common.Messaging.DeviceEventArgs.UniqueDeviceID">
            <summary>
            Unique device ID
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Messaging.MessageBroker">
            <summary>
            Message Central of complete CommonApi
            </summary>
            <remarks>
            Potential listeners can register for one or more exposed events. 
            These Listeners are then asynchronously notified everytime a subscribed event occurs. 
            </remarks>
        </member>
        <member name="M:Hbm.Api.Common.Messaging.MessageBroker.RaiseDeviceConnectedAsync(Hbm.Api.Common.Messaging.DeviceEventArgs)">
            <summary>
            Raises the <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.DeviceConnected"/> event in an asynchronous manner (Fire-and-Forget).
            </summary>
            <remarks>
            Notifies all registered listeners for event <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.DeviceConnected"/> in a separate thread.
            By this, program flow will not block.
            </remarks>
            <param name="e">Additional Event Info</param>
        </member>
        <member name="M:Hbm.Api.Common.Messaging.MessageBroker.RaiseDeviceDisconnectedAsync(Hbm.Api.Common.Messaging.DeviceEventArgs)">
            <summary>
            Raises the <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.DeviceDisconnected"/> event in an asynchronous manner (Fire-and-Forget).
            </summary>
            <remarks>
            Notifies all registered listeners for event <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.DeviceDisconnected"/> in a separate thread.
            By this, program flow will not block.
            </remarks>
            <param name="e">Additional Event Info</param>
        </member>
        <member name="M:Hbm.Api.Common.Messaging.MessageBroker.RaiseChannelNameChangedAsync(Hbm.Api.Common.Messaging.ChannelEventArgs)">
            <summary>
            Raises the <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.ChannelNameChanged"/> event in an asynchronous manner (Fire-and-Forget).
            </summary>
            <remarks>
            Notifies all registered listeners for event <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.ChannelNameChanged"/> in a separate thread.
            By this, program flow will not block.
            </remarks>
            <param name="e">Additional Event Info</param>
        </member>
        <member name="M:Hbm.Api.Common.Messaging.MessageBroker.RaiseSignalNameChangedAsync(Hbm.Api.Common.Messaging.SignalEventArgs)">
            <summary>
            Raises the <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.SignalNameChanged"/> event in an asynchronous manner (Fire-and-Forget).
            </summary>
            <remarks>
            Notifies all registered listeners for event <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.SignalNameChanged"/> in a separate thread.
            By this, program flow will not block.
            </remarks>
            <param name="e">Additional Event Info</param>
        </member>
        <member name="E:Hbm.Api.Common.Messaging.MessageBroker.DeviceConnected">
            <summary>
            Occurs when a device has been connected
            </summary>
        </member>
        <member name="E:Hbm.Api.Common.Messaging.MessageBroker.DeviceDisconnected">
            <summary>
            Occurs when a device has been disconnected
            </summary>
        </member>
        <member name="E:Hbm.Api.Common.Messaging.MessageBroker.ChannelNameChanged">
            <summary>
            Occurs when a channel has been renamed
            </summary>
        </member>
        <member name="E:Hbm.Api.Common.Messaging.MessageBroker.SignalNameChanged">
            <summary>
            Occurs when a signal has been renamed
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Messaging.MessageBroker.DeviceStatusEventHandler">
            <summary>
            Represents the method that handles device status events, e.g. <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.DeviceConnected"/> or <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.DeviceDisconnected"/>.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Messaging.MessageBroker.ChannelStatusEventHandler">
            <summary>
            Represents the method that handles channel status events, e.g. <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.ChannelNameChanged"/>. 
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Messaging.MessageBroker.SignalStatusEventHandler">
            <summary>
            Represents the method that handles signal status events, e.g. <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.SignalNameChanged"/>. 
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Messaging.MessageBroker.DeviceStatusEventNotifier">
            <summary>
            Embedded class to notify DeviceStatus-Listener, like DeviceConnected, in separate threads
            </summary>
            <remarks>
            Can only be instantiated from inside of the class MessageBroker
            </remarks>
        </member>
        <member name="M:Hbm.Api.Common.Messaging.MessageBroker.DeviceStatusEventNotifier.#ctor(Hbm.Api.Common.Messaging.MessageBroker.DeviceStatusEventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="handler">Reference to DeviceStatusEventHandler</param>
        </member>
        <member name="M:Hbm.Api.Common.Messaging.MessageBroker.DeviceStatusEventNotifier.Start(System.Object)">
            <summary>
            Invokes the mentioned handler
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Messaging.MessageBroker.ChannelStatusEventNotifier">
            <summary>
            Embedded class to notify ChannelStatus-Listener, like ChannelNameChanged, in separate threads
            </summary>
            <remarks>
            Can only be instantiated from inside of the class MessageBroker
            </remarks>
        </member>
        <member name="M:Hbm.Api.Common.Messaging.MessageBroker.ChannelStatusEventNotifier.#ctor(Hbm.Api.Common.Messaging.MessageBroker.ChannelStatusEventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="handler">Reference to ChannelStatusEventHandler</param>
        </member>
        <member name="M:Hbm.Api.Common.Messaging.MessageBroker.ChannelStatusEventNotifier.Start(System.Object)">
            <summary>
            Invokes the mentioned handler
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Messaging.MessageBroker.SignalStatusEventNotifier">
            <summary>
            Embedded class to notify SignalStatus-Listener, like SignalNameChanged, in separate threads
            </summary>
            <remarks>
            Can only be instantiated from inside of the class MessageBroker
            </remarks>
        </member>
        <member name="M:Hbm.Api.Common.Messaging.MessageBroker.SignalStatusEventNotifier.#ctor(Hbm.Api.Common.Messaging.MessageBroker.SignalStatusEventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="handler">Reference to SignalStatusEventHandler</param>
        </member>
        <member name="M:Hbm.Api.Common.Messaging.MessageBroker.SignalStatusEventNotifier.Start(System.Object)">
            <summary>
            Invokes the mentioned handler
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.DaqMeasurement">
            <summary>
            Class that manages data acquisition.
            
            Use this class to execute a continuous measurement. Therefore
            you should keep with following work flow:
              * Scan for devices (<see cref="M:Hbm.Api.Common.DaqEnvironment.Scan" text="Scan"/>)
              * Connect to device(s) (<see cref="M:Hbm.Api.Common.DaqEnvironment.Connect(System.Collections.Generic.List{Hbm.Api.Common.Entities.Device},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)" text="Connect"/>)
              * Add/Remove signals to/from measurement (<see cref="M:Hbm.Api.Common.DaqMeasurement.AddSignals(Hbm.Api.Common.Entities.Device,System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})"/>, <see cref="M:Hbm.Api.Common.DaqMeasurement.RemoveSignals(Hbm.Api.Common.Entities.Device,System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})"/>)
              * Prepare data acquisition (<see cref="M:Hbm.Api.Common.DaqMeasurement.PrepareDaq(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)"/>)
              * Start data acquisition (<see cref="M:Hbm.Api.Common.DaqMeasurement.StartDaq(Hbm.Api.Common.Enums.DataAcquisitionMode,System.Int32)"/>)
              * Loop
                * Get measurement values(<see cref="M:Hbm.Api.Common.DaqMeasurement.FillMeasurementValues"/>)
                * Do something with these values
              * Loop end
              * Stop data acquisition (<see cref="M:Hbm.Api.Common.DaqMeasurement.StopDaq"/>)
            
            After a device has been <see cref="M:Hbm.Api.Common.DaqEnvironment.Connect(System.Collections.Generic.List{Hbm.Api.Common.Entities.Device},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)" text="connected"/>
            (and prepared to your measurement task - e.g. by
            Device.AssignConnector, you can choose signals of the device
            you want to measure. Each of these signals has to be
            added to the measurement.
            
            Call <see cref="M:Hbm.Api.Common.DaqMeasurement.PrepareDaq(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)"/>
            to let the API allocate the internal circular buffers of the
            signals and do further internal preparations like sorting
            signals into different groups for different sample rates etc.
            
            To start the measurement, you have to call <see cref="M:Hbm.Api.Common.DaqMeasurement.StartDaq(Hbm.Api.Common.Enums.DataAcquisitionMode,System.Int32)"/>.
            If you use more than one device and the devices are
            synchronized (that means that the system time on the devices
            is pretty equal), you should start the data acquisition with <see cref="T:Hbm.Api.Common.Enums.DataAcquisitionMode" text="DataAcquisitionMode.TimestampSynchronized"/>.
            In case of a synchronized measurement, the first timestamp of
            each signal will ideally be the same (or at least as close to
            each other as possible).
            
            To get measurement values, the function <see cref="M:Hbm.Api.Common.DaqMeasurement.FillMeasurementValues" text="FillMeasurementValues"/>
            has to be called periodically. Until the next call to this
            function, you can access the measurement values under <see cref="P:Hbm.Api.Common.Entities.Signals.Signal.ContinuousMeasurementValues" text="Signal.ContinuousMeasurementValues"/>
            \of the signals you added to the measurement. If the
            measurement has been started synchronized, it is guaranteed,
            that each signal with same sample rate (distributed to
            various devices) gets the same number of new measurement
            values.
            
            <see cref="M:Hbm.Api.Common.DaqMeasurement.StopDaq"/>
            ends a running measurement and removes all, prior added signals 
            from the measurement. So keep in mind to add the signals again before
            preparing/starting a new measurement.
            </summary>
            <example>
            <code>
            ...
            <i>// Scan for devices and connect to the first device that has been found</i>
            DaqEnvironment daqEnvironment = DaqEnvironment.GetInstance ();
            List&lt;Device&gt; devices = daqEnvironment.Scan();
            List&lt;Problem&gt; lastProblems; <i>// Used to return warnings and errors</i>
            daqEnvironment.Connect(devices[0], out lastProblems);
            
            <i>// Get a List of all measurable signals of the connected device</i>
            List&lt;Signal&gt; signalList = devices[0].GetAllSignals().Where(sig =&gt; sig.IsMeasurable).ToList();
            
            <i>// Create a DaqMeasurement object</i>
            DaqMeasurement daqMeasurement = <b>new</b> DaqMeasurement();
            
            <i>// Add all measurable signals of the first device to the measurement</i>
            daqMeasurement.AddSignals(devices[0], signalList);
            
            <i>// Prepare data acquisition</i>
            daqMeasurement.PrepareDaq();
            
            <i>// start synchronized data acquisition...</i>
            daqMeasurement.StartDaq(DataAcquisitionMode.TimestampSynchronized);
            
            <i>// run data acquisition for 10 seconds</i>
            Stopwatch stopWatch = <b>new</b> Stopwatch();
            stopWatch.Start();
            <b>while</b> (stopWatch.ElapsedMilliseconds&lt;10000)
            {
                <i>// Update measurement values of the signals that were added to the measurement</i>
                daqMeasurement.FillMeasurementValues();
            
                <i>// work with measurement values ..e.g.:</i>
                <b>foreach</b> (Signal sig <b>in</b> signalList)
                {
                    Debug.Print("Number of new measurement values for signal {0} = {1}",
                                 sig.Name, sig.ContinuousMeasurementValues.UpdatedValueCount);
                    <b>if</b> (sig.ContinuousMeasurementValues.UpdatedValueCount &gt; 0)
                    {
                        Debug.Print("First new measurement value={0}", sig.ContinuousMeasurementValues.Values[0]);
                    }
                }
            
                <i>// wait a while...</i>
                System.Threading.Thread.Sleep(100);
            }
            
            <i>// stop data acquisition</i>
            daqMeasurement.StopDaq();
            
            <i>// dispose DaqEnvironment</i>
            daqEnvironment.Dispose();
            
            <i>// I M P O R T A N T !!!!!:</i>
            <i>// To start a new measurement you have to go through the complete cycle:</i>
            <i>// daqMeasurement.AddSignals(..);</i>
            <i>// daqMeasurement.PrepareDaq(..);</i>
            <i>// and daqMeasurement.StartDaq(..)!</i>
            <i>// It is NOT sufficient just to call daqMeasurement.StartDaq(..) again!!!</i>
            ...
            </code>
            
            </example>                                                                                                                                                                       
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.#ctor">
            <summary>
            Creates new instance of the class
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates new instance of the class
            </summary>
            <param name="dataFetchingInterval">Time interval in ms, in which measurement data is requested from all devices
            that take part in a measurement session.</param>
            <param name="signalMaxTransmissionTime">Max. time in ms, that a transmission of measurement data may take, 
            before a signal is excluded from measurement (due to not receiving measurement values from the device). 
            </param>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.Finalize">
            <summary>
            Destructor. Cleans up all things if not yet done....
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.GroupRegisteredSignals(System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})">
            <summary>
            Groups the registered signals, if required. If the registered signals contain DigitalCompressedSignals, there will be
            created one DigitalCompressedGroupSignal for each compression group (specified within the DigitalCompressedSignals).
            A DigitalCompressedGroupSignal contains all DigitalCompressedSignals with the same compression group number.
            The DigitalCompressedGroupSignal will be part of the measurement, not the DigitalCompressedSignals. 
            </summary>
            <remarks>
            This method may be used in concrete device implementations if the device uses compression (one measurement value for multiple digital signals)
            for measuring digital signals (using <see cref="T:Hbm.Api.Common.Entities.Signals.DigitalCompressedSignal"/>). 
            Then its useful for implementing the device specific methods <see cref="M:Hbm.Api.Common.Entities.Device.ReadSingleMeasurementValue(System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})"/> and
            <see cref="M:Hbm.Api.Common.Entities.Device.ReadSingleMeasurementValueOfAllSignals"/>
            </remarks>
            <param name="registeredSignals"><c>List</c> of registered signals (of one device)</param>
            <returns>Grouped list of registered signals (of one device)</returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.AddSignals(Hbm.Api.Common.Entities.Device,System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})">
            <summary>
            Adds signals of the given device to the measurement
            </summary>
            <param name="device">Device that contains the signals that should be added to the measurement</param>
            <param name="signals">Signals to add to the measurement</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException">Thrown, if data acquisition is running.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="device"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="signals"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if device.GetUniqueDeviceID() returns <c>null</c> or empty string.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if <paramref name="signals"/> contains signals which are not measurable.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.AddSignals(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal)">
            <summary>
            Adds the given signal of the given device to the measurement
            </summary>
            <param name="device">Device that contains the signal that should be added to the measurement</param>
            <param name="signal">Signal to add to the measurement</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException">Thrown, if data acquisition is running.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="device"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="signal"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if device.GetUniqueDeviceID() returns <c>null</c> or empty string.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.AddSignals(Hbm.Api.Common.Entities.Device)">
            <summary>
            Adds all signals of the given device to the measurement
            </summary>
            <param name="device">Device that contains the signals that should be added to the measurement</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException">Thrown, if data acquisition is running.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="device"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if device.GetUniqueDeviceID() returns <c>null</c> or empty string.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.RemoveSignals(Hbm.Api.Common.Entities.Device,System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})">
            <summary>
            Removes already added signals of the given device from the measurement
            </summary>
            <param name="device">Device that contains signals that should be removed from the measurement</param>
            <param name="signals">Signals to remove from the measurement</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException">Thrown, if data acquisition is running.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="device"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="signals"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if device.GetUniqueDeviceID() returns <c>null</c> or empty string.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.RemoveSignals(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal)">
            <summary>
            Removes an already added signal of the given device from the measurement
            </summary>
            <param name="device">Device that contains the signal that should be removed from the measurement</param>
            <param name="signal">Signal to remove from the measurement</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException">Thrown, if data acquisition is running.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="device"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="signal"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if device.GetUniqueDeviceID() returns <c>null</c> or empty string.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.RemoveSignals(Hbm.Api.Common.Entities.Device)">
            <summary>
            Removes all signals of the given device from the measurement
            </summary>
            <param name="device">Device that contains the signals that should be removed from the measurement</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException">Thrown, if data acquisition is running.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="device"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if device.GetUniqueDeviceID() returns <c>null</c> or empty string.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.PrepareDaq(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Prepares a continuous measurement
            </summary>
            <param name="bufferTimeout">Buffer timeout in milliseconds. Used to calculate size of internal circular buffer. 
            At least there is a buffer of 1000 values for each signal.
            Normally the buffer size is (bufferTimeout/1000)*sample rate of the signal, prior added to the measurement
            (E.g.: Signal.SampleRate=1200Hz, bufferTimeOut=1000ms =&gt; size of internal circular buffer is 1200 entries)</param>
            <param name="maxNumberOfConcurrentDaqThreads">Maximum number of concurrent running threads that fetch data from
            devices and put them into the circular buffers of the signals. At least 1 thread is necessary. Max number depends on
            your operation system and the number of used devices. Up to 100 threads should be no problem. E.g.: If you want to 
            measure 20 devices, you could use one thread for each device.</param>
            <param name="minNumberOfBufferedValues"> Min. number of elements that will be buffered in the circualr buffers of the signals that
            take part in measurement. MinNumberOfBufferedValues is used if minNumberOfBufferedValues&gt;bufferTimeout*signal.Samplerate. This is important for 
            signals that do not have a sample rate (or sample rate = 0 Hz) which are typically all signals with SynchronMode=NonEquidistant</param>
            <param name="isFirstTimeStampOnlyRequested">If true, only the first timestamp of an equidistant signal will be copied to signals measurement values during a call 
            of <see cref="M:Hbm.Api.Common.DaqMeasurement.FillMeasurementValues"/> </param>
            <param name="isFirstStatusOnlyRequested">If true, only the first state value of an equidistant signal will be copied to signals measurement values during a call 
            of <see cref="M:Hbm.Api.Common.DaqMeasurement.FillMeasurementValues"/> </param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException">Thrown, if data acquisition is already running.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqNoSignalsAddedException">Thrown, if no signals have been added to measurement.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if maxNumberOfConcurrentDaqThreads is less than 1.</exception>        
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.PrepareDaq">
            <summary>
            Prepares a continuous measurement with fitting parameters for most cases.
            </summary>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException">Thrown, if data acquisition is already running.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqNoSignalsAddedException">Thrown, if no signals have been added to measurement.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.PrepareDaq(System.Int32)">
            <summary>
            Prepares a continuous measurement
            </summary>
            <param name="bufferTimeout">Buffer timeout in milliseconds. Used to calculate size of internal circular buffer. 
            At least there is a buffer of 1000 values for each signal.
            Normally the buffer size is (bufferTimeout/1000)*sample rate of the signal, prior added to the measurement
            (E.g.: Signal.SampleRate=1200Hz, bufferTimeOut=1000ms =&gt; size of internal circular buffer is 1200 entries)</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException">Thrown, if data acquisition is already running.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqNoSignalsAddedException">Thrown, if no signals have been added to measurement.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.StartDaq(Hbm.Api.Common.Enums.DataAcquisitionMode,System.Int32)">
            <summary>
            Starts (synchronized) measuring of all signals that were added to the measurement.
            </summary>
            <param name="acquisitionMode">
            The <see cref="T:Hbm.Api.Common.Enums.DataAcquisitionMode" text="acquisition mode"/> defines the procedure that is used to synchronize differnt devices during the start of a measurement
            and also the way measurement values will be provided (<c>DaqMeasurement.FillMeasurementValues</c>).</param>
            <param name="syncTimeOut">Maximum time in ms, that is used to start a synchronized measurement. If it is not possible to 
            start a synchronized measurement within this time, a <c>Hbm.API.Common.Exceptions.StartDaqFailedException</c> will be thrown.</param>
            <returns>Maximum difference between time stamps of the first measurement values in seconds. 
            0 means, that the first time stamp of each signal has the same value</returns>
            <remarks>After the measurement has been started, the start time (smallest timestamp of all signals, that take part in
            measurement) can be found in <c>StartTime</c>. If the measurement is started <see cref="F:Hbm.Api.Common.Enums.DataAcquisitionMode.Unsynchronized" text="unsynchronized"/>
            the function returns 0.</remarks>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqStartFailedException">Thrown, if start of data acquisition failed.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException">Thrown, if data acquisition is already running.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqNoSignalsAddedException">Thrown, if no signal has been added to the measurement.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqNoSignalsPreparedException">Thrown, if signals have not been prepared for measurement.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.FillMeasurementValues">
            <summary>
            This function updates all measurement values of all signals that take part in measuring.
            In case of a synchronized start of data acquisition, it asserts that each signal with same 
            sample rate (distributed to various devices) gets the same number of new measuring values.
            E.g. signal_A on device 1 with sample rate 20Hz gets the same number of new measurement values as
                 signal_B on device 2 with sample rate 20 Hz!
            Otherwise (if <c>StartDaq</c> started an unsynchronized measurement, the signals 
            get all measurement values that are accumulated since the last call of this function.
            This function also asserts, that there is enough allocated memory for the measurement values of each signal.
            So call this function periodically!
            </summary>
            <remarks>In case of an Signal with <c>SynchronMode</c> set to NonEquidistant, all received measurement values will be returned!
            No matter how the measurement has been started (see<c>DataAcquisitionMode</c>). </remarks>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqNotStartedException">Thrown, if data acquisition is not yet started.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.StopDaq">
            <summary>
            Stops data acquisition of all devices that take part in measuring
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.Dispose">
            <summary>
            Disposes the current instance and fulfils cleanup operations
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.StartDaq">
            <summary>
            Starts measuring all signals that were added to the measurement
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.FillCircularBufferWorker">
            <summary>
            Worker function that enqueues ReadDaqValues function (that updates all circular buffers for all 
            signals of the device that were added to the measurement) for each device that is not fetching data at the moment...
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.GroupRegisteredContainerSignals(System.Collections.Generic.List{Hbm.Api.Common.DaqMeasurement.MeasurementContainer})">
            <summary>
            Groups the registered signals, if required. If the registered signals contain DigitalCompressedSignals, there will be
            created one DigitalCompressedGroupSignal for each compression group. 
            </summary>
            <param name="registeredSignals"><c>List</c> of measurement containers which contain the registered signals (per device)</param>
            <returns><c>List</c> of measurement containers which contains the grouped list of registered signals (per device) </returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.GenerateSampleRateLists(System.Collections.Generic.List{Hbm.Api.Common.DaqMeasurement.MeasurementContainer})">
            <summary>
            Generates a dictionay with a list of signals for all signals with the same samplerate.
            </summary>
            <param name="groupedRegisteredSignals"><c>List</c> of grouped registered signals</param>
            <returns>Generated <c>Dictionary</c> with the sample rate as key and the signal list als values</returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.StartUnsynchronizedMeasurement(Hbm.Api.Common.Enums.DataAcquisitionMode,System.Int32)">
            <summary>
            Waits until each signal has a measurement value 
            and DOES NOT throw away measurement values during unsynchronized start!!!
            We need this ONLY to get a startTime...
            Unequidistant signals will not be considered here!!! We will not wait
            for timestamps of unequidistant signals!!!
            </summary>
            <param name="acquisitionMode">Acquisition mode</param>
            <param name="syncTimeOut">Timeout until all relevant signals should have a measurement value</param>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.StartTimestampSynchronizedMeasurement(System.Int32)">
            <summary>
            Starts a timestamp synchronized measurement
            </summary>
            <param name="syncTimeOut">Maximum time in ms, that is used to start a synchronized measurement. If it is not possible to 
            start a synchronized measurement within this time, a <c>Hbm.API.Common.Exceptions.StartDaqFailedException</c> will be thrown.</param>
            <returns>Maximum difference between time stamps of the first measurement values. 
            0 means, that the first time stamp of each signal has the same value</returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.WaitForMeasurementValues(Hbm.Api.Common.Enums.DataAcquisitionMode,System.Int32)">
            <summary>
            Waits until each signal, that takes part in measurement, has at least one measurement value.
            To prevent circular buffer overflow, only the latest mearsurement value of each signal will be held in
            the circular buffer until all signals got at least one measurement value.
            This function will be called during the start of a software synchronized measurrement only!
            </summary>
            <param name="acquisitionMode">Acquisition mode</param>
            <param name="syncTimeOut">Timeout until all relevant signals should have a measurement value</param>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.GetLatestOfTheFirstTimeStamps">
            <summary>
            Finds startTime (latest timestamp of all first timestamps of all signals that take part in measurement).
            Assert that all relevant signals already have a measurement value and a time stamp
            before calling this function!
            </summary>
            <returns>Latest timestamp of all first timestamps of all signals that take part in measurement</returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.GetLatestTimeStampDirectAfterStartTime(System.Double,System.Int32)">
            <summary>
            Waits until each signal, that takes part in measurement, has at least one time stamp behind start time.
            Finds first time stamp for each signal where timestamp > startTime and return the latest of these time stamps
            </summary>
            <param name="startTime">Start time, form which to search for next time stamp</param>
            <param name="syncTimeOut">Timeout until latest time stamp should have been found</param>
            <returns>Latest time stamp of all signals after start time</returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.WaitForTimeStampsGreaterOrEqual(System.Double,System.Int32)">
            <summary>
            Waits until each signal, that takes part in measurement, has a timestamp >= startTime
            </summary>
            <param name="startTime">Start time, from which to search for next time stamp</param>
            <param name="syncTimeOut">Timeout until time stamps should have been found</param>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.MoveCircularBufferReadPointerToBestFittingTimeStamp(System.Double)">
            <summary>
            Goes through CircularBuffer of each signal, finds best fitting entry for given startTime
            and moves the read pointer to this entry (for all signals that take part in measurement)
            </summary>
            <param name="startTime">TimeStamp that should be meet as close as possible</param>
            <returns>Earliest timeStamp that fits for given startTime. This timeStamp may also be EARLIER than given startTime!!!</returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.GetMaxTimeStampDelta(System.Double)">
            <summary>
            Calculates max. difference from given startTime to all very first timestamps of the 
            signals that take part in measurement
            </summary>
            <param name="startTime">Time to check</param>
            <returns>Max. difference between given startTime and first timeStamp of all relevant signals</returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.SetCircularBufferStartTime(System.Double)">
            <summary>
            Sets the start time of the circular buffers of all signals that take part in measurement to given value.
            </summary>
            <remarks>This value will be substracted from all timestamps. 
            It is possible that there is only one single signal, whose first time stamp starts at excactly 0.0 seconds !!</remarks>
            <param name="startTime">Start time for all circular buffers</param>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.HasEquidistantSignalsRegistered">
            <summary>
            Checks if there are equidistant signals within the signals that were added
            to the measurement (special case within StartDaq).
            </summary>
            <returns>True, if there is at least one equidistant signal 
            </returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.HasSignalWithoutValues(Hbm.Api.Common.Enums.DataAcquisitionMode)">
            <summary>
            Checks, if there is a signal that got no measurement values since start of the latest measurement.
            This is done by considering the acquisition mode of the started measurement and the SynchronMode
            of the signals.
            If acqusitionMode is Unsynchronized or HardwareSynchronized, non equidistant signals will be ignored
            </summary>
            <param name="acqusitionMode">DataAquisitionMode that is used to start the measurement</param>
            <returns>True, if there is a signal without measurement values</returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.PrepareMeasurementForSignalTimeOutDetection">
            <summary>
            Prepares a measurement to be able to detect signals that ran into timeout
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.CalculateSignalTimeout(System.Int32,System.Decimal)">
            <summary>
            Calculates a timeOut in ms for a signal according to given parameters
            </summary>
            <param name="dataFetchingInterval">Time interval in ms, in which measurement data is requested from all devices
            that take part in a measurement session (to fill the circular buffers of each signal).</param>
            <param name="sampleRate">Sample rate of the signal in Hz</param>
            <returns>ExcludeFromDaqTimeout in ms to decide when a signal will be excluded from a running measuremnet</returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.CheckSignalsTimeOut">
            <summary>
            Checks all signals, that are part of the running measurement, for timeout and 
            sets their IsExcludedFromDac flags to true if a timeout occurred
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.Dispose(System.Boolean)">
            <summary>
            Disposes the instance and fulfils cleanup operations
            </summary>
            <param name="isDisposing">Indicates, if this method is called directly, not by the finalizer</param>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.DisposeStreamingManager(Hbm.Api.Common.Core.Streaming.StreamingManager)">
            <summary>
            Disposes the streaming manager
            </summary>
            <param name="streamingManager">Instance of the streaming manager to be disposed</param>
        </member>
        <member name="P:Hbm.Api.Common.DaqMeasurement.DataFetchingInterval">
            <summary>
            Time interval in ms, in which measurement data is requested from all devices
            that take part in a measurement.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.DaqMeasurement.MeasurementStartUTCTime">
            <summary>
            Start date and time of the latest measurement in UTC format.
            This is the minimum timestamp of all signals that take part in a measurement.
            Format is UTC unix time (seconds since 1.1.2000, the post decimal places are the running second)
            </summary>
            <remarks>Notice, that this is NOT local time, but Greenwich Mean Time (GMT)</remarks>
        </member>
        <member name="P:Hbm.Api.Common.DaqMeasurement.MeasurementStartTime">
            <summary>
            Start time and date of the latest measurement. This time is generated by transforming the 
            first timestamp of the latest measurement(<see cref="P:Hbm.Api.Common.DaqMeasurement.MeasurementStartUTCTime"/> into the local date time representation of this computer.
            </summary>
            <remarks>This is local time and date (depends on your region and summer/winter time)!</remarks>
        </member>
        <member name="P:Hbm.Api.Common.DaqMeasurement.MeasurementStartSystemTime">
            <summary>
            Local start time and date of the latest measurement, executed on this computer.
            This time is taken from the PC when calling the <see cref="M:Hbm.Api.Common.DaqMeasurement.StartDaq"/> function.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.DaqMeasurement.IsRunning">
            <summary>
            Returns true, if data acquisition is currently running.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.DaqMeasurement.MeasurementContainer">
            <summary>
            Container for all registered signals for one device
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.DaqMeasurement.MeasurementContainer.#ctor">
            <summary>
            Creates a new instance and  initializes the signal list
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.DaqMeasurement.MeasurementContainer.Device">
            <summary>
            Device that is used for a measurement
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.DaqMeasurement.MeasurementContainer.Signals">
            <summary>
            Signals of the device that are used for measurement
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Adapter">
            <summary>
            Represents a network adapter of a device
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Adapter.#ctor">
            <summary>
            Creates a new instance and initializes the list of services 
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Adapter.IpAddress">
            <summary>
            IP address of the network adapter
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Adapter.Services">
            <summary>
            List of all services provided by the device
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Connectors.AnalogInConnector">
            <summary>
            Represents a connector, to which a sensor can be attached
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Connectors.CanConnector">
            <summary>
            Represents a connector, to which a CAN Bus can be connected.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Connectors.CanConnector.BitRate">
            <summary>
            Bit rate of the CAN Bus [bit/s], e.g. 50000, 100000, 250000.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Connectors.CanConnector.IsTerminated">
            <summary>
            Enables (or disables) the bus termination for this connector.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Connectors.CanConnector.SupplyVoltage">
            <summary>
            Supply voltage (power) [V].
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Connectors.CanConnector.IsListenOnly">
            <summary>
            Enables (or disables) the listen only mode for the CAN bus.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Connectors.CanConnector.ErrorResetMode">
            <summary>
            Gets or sets the mode how the error state will be reset.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Connectors.CanConnector.ErrorResetDelayTime">
            <summary>
            Gets or sets the delay time when the error state would be reset after solving the error.
            </summary>
            <remarks>
            This property will be used when <see cref="P:Hbm.Api.Common.Entities.Connectors.CanConnector.ErrorResetMode"/> is set to <see cref="F:Hbm.Api.Common.Enums.ErrorResetMode.Delayed"/>,
            otherwise it will be ignored.
            </remarks>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Connectors.VirtualConnector">
            <summary>
            Represents a connector to which no physical sensor can be connected
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Filters.BesselFilter">
            <summary>
            Bessel IIR (Infinite Impulse Response) filter is a type of linear filter with a maximally flat group delay (maximally linear phase response). 
            They are characterized by almost constant group delay across the entire band-pass, thus preserving the wave shape of filtered signals in the band-pass.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Filters.BesselFilter.ToString">
            <summary>
            Converts the name and frequency of the filter into a human readable string representation, e.g. Bessel, 10 Hz
            </summary>
            <returns>Converted and concatenated filter string</returns>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Filters.ButterworthFilter">
            <summary>
            The Butterworth IIR (Infinite Impulse Response) filter is a type of signal processing filter, designed to have a frequency response as flat 
            as possible in the band-pass. It is also referred to as a maximally flat magnitude filter.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Filters.ButterworthFilter.ToString">
            <summary>
            Converts the name and frequency of the filter into a human readable string representation, e.g. Butterworth, 10 Hz
            </summary>
            <returns>Converted and concatenated filter string</returns>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Filters.HighpassFilter">
            <summary>
            Filter, that passes high-frequency signals but reduces the amplitude of signals 
            with frequencies lower than the cutoff frequency.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Filters.HighpassFilter.ToString">
            <summary>
            Converts the name and frequency of the filter into a human readable string representation, e.g. Highpass, 5 Hz
            </summary>
            <returns>Converted and concatenated filter string</returns>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Filters.NoFilter">
            <summary>
            No filter should be used to disable the filter.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Filters.NoFilter.#ctor">
            <summary>
            Creates new instance
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Filters.NoFilter.ToString">
            <summary>
            Converts the name and frequency of the filter into a human readable string representation
            </summary>
            <returns>Filter string</returns>
        </member>
        <member name="T:Hbm.Api.Common.Entities.MeasurementValue">
            <summary>
            Represents a single measurement value consisting of one measurement value, one timestamp and one state
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.MeasurementValue.#ctor(System.Double,System.Double,Hbm.Api.Common.Enums.MeasurementValueState)">
            <summary>
            Constructor
            </summary>
            <param name="value">Measurement value</param>
            <param name="timeStamp">Time stamp for measurement value</param>
            <param name="state">Status of measurement value</param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValue.Value">
            <summary>
            Measurement value
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValue.Timestamp">
            <summary>
            Timestamp of value
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValue.State">
            <summary>
            Indicates the validity of the measurement value
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer">
            <summary>
            Manages a circular buffer to buffer <c>Hbm.API.Common.Entities.MeasurementValues</c>.
            If values will not be fetched before buffer is full, the oldest values within the
            buffer will be overwritten and <c>BufferOverflowOccurred</c> will be set to true
            until values will be fetched from buffer again.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.#ctor">
            <summary>
            Circular buffer for measurement values
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.SetStartTime(System.Double)">
            <summary>
            Sets the start time for the timestamps. The timestamps that are already stored in the
            circular buffer will be decreased by this time during the execution of this function.
            </summary>
            <param name="startTime">Time in secondes since 1.1.2000 that is substracted from all timestamps within the circular buffer.
            When adding values via <see cref="M:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.AddValue(System.Double,System.Double,Hbm.Api.Common.Enums.MeasurementValueState)"/> or <see cref="M:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.AddValues(System.Double[],System.Double[],Hbm.Api.Common.Enums.MeasurementValueState[],System.Int32)"/>to the circular buffer, this start time will be
            subtracted from the timestamps of the values to add.</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.AddValue(System.Double,System.Double,Hbm.Api.Common.Enums.MeasurementValueState)">
            <summary>
            Adds values of a single "measurement value line" to the circular buffer 
            </summary>
            <param name="measurementValue">Measurement value</param>
            <param name="timeStampValue">Time stamp</param>
            <param name="statusValue">Status information for each measurement value</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.AddValues(System.Double[],System.Double[],Hbm.Api.Common.Enums.MeasurementValueState[],System.Int32)">
            <summary>
            Adds numberOfValuesToAdd "measurement value lines" to the circular buffer
            </summary>
            <param name="measurementValues">Measurement values</param>
            <param name="timeStampValues">Time stamps</param>
            <param name="statusValues">Status of the measurement value</param>
            <param name="numberOfValuesToAdd">Number of values to add</param>
            <exception cref="T:System.ArgumentException">Thrown, if numberOfValuesToAdd is less than 0.</exception>   
            <exception cref="T:System.ArgumentException">Thrown, if size of measurementValues, timeStampValues or statusValues is less than numberOfValuesToAdd.</exception> 
            <exception cref="T:System.ArgumentNullException">Thrown, if measurementValues, timeStampValues or statusValues is null.</exception>        
        </member>
        <member name="M:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.GetValues(System.Int32,Hbm.Api.Common.Entities.MeasurementValues)">
            <summary>
            Gets the demanded number of measurement values from circular buffer
            </summary>
            <param name="numberOfValuesToGet">Number of measurement values to get from circular buffer</param>
            <param name="measurementValues"><c>Hbm.API.Common.Entities.MeasurementValues</c> object to copy circular buffer values to</param>
            <remarks>Size of <c>Hbm.API.Common.Entities.MeasurementValues</c> will be extended, if current buffer size is to small to get all demanded values.
            If numberOfValuesToGet is bigger than the number of available values in the circular buffer, the number of updated values it set to 
            number of available values!</remarks>
            <exception cref="T:System.ArgumentException">Thrown, if numberOfValuesToGet is less than 0.</exception>   
            <exception cref="T:System.ArgumentNullException">Thrown, if measurementValues is null.</exception>        
        </member>
        <member name="M:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.PeekValues(System.Int32,Hbm.Api.Common.Entities.MeasurementValues)">
            <summary>
            Returns the next available <c>MeasurementValues</c> but does not consume them.
            So the demanded values will not be "removed" from circular buffer!
            </summary>
            <param name="numberOfValuesToPeek">Number of measurement values to peek</param>
            <param name="measurementValues">Reference to an existing MeasurementValues object</param>
            <exception cref="T:System.ArgumentException">Thrown, if numberOfValuesToPeek is less than 0.</exception>   
            <exception cref="T:System.ArgumentNullException">Thrown, if measurementValues is null.</exception> 
        </member>
        <member name="M:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.Reset">
            <summary>
            Resets the circular buffer.
            <c>NumberOfValuesInCircularBuffer</c> will return 0 after calling this function.
            The <c>Size</c> of the circular buffer remains unchanged.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.IncrementReadPointer(System.Int32)">
            <summary>
            Increments the read pointer by the given increment (by considering "wrap around" of circular buffer)
            This function will be used during the execution of DaqMeasurement.StartDaq() function 
            (due to getting same start-timestamp for all signals)
            </summary>
            <param name="increment">Number of positions to increment</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.GetValuesFromBuffer(System.Int32,Hbm.Api.Common.Entities.MeasurementValues)">
            <summary>
            Gets (a prior calculated) numberOfValuesToGet new measurementvalues from circular buffer
            </summary>
            <param name="numberOfValuesToGet">Number of measurement values to get from circular buffer</param>
            <param name="measurementValues">MeasurementValues object to copy circular buffer values to</param>
            <remarks>MeasurementValues buffer size will be redimmed, if current buffersize is to small to get all demanded values.
            If numberOfValuesToGet is greater than the number of available values in the circular buffer, the number of updatedValues it set to 
            number of available values!</remarks>
        </member>
        <member name="M:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.CopySuccessiveMeasurementValues(System.Int32,System.Int32,Hbm.Api.Common.Entities.MeasurementValues,System.Int32,System.Boolean)">
            <summary>
            Copies given number of SUCCESSIVE values from internal circular buffer into a given measurementValues target, 
            depending of the flags FirstStatusOnly and FirstTimeStampOnly.
            </summary>
            <param name="numberOfValuesToCopy">Number of successive values to copy.</param>
            <param name="sourceStartPosition">Start position of values to copy.</param>
            <param name="target">Target to copy the values to.</param>
            <param name="targetStartPosition">Start position within target to copy the values to.</param>
            <param name="isFirstPartToCopy">True, if this call should copy the first part of the circular buffer to the target (BEFORE a wrap).
            In this case we have to copy only the first timestamp or status if IsFirstTimeStampOnlyRequested or IsFirstStatusOnlyRequested of target is true. </param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.Size">
            <summary>
            Size of the circular buffer (min. size is 1000 values!)
            Setting the size of the buffer resets the circular buffer!
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.NumberOfValuesInCircularBuffer">
            <summary>
            Number of not yet fetched values in the buffer
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.BufferOverflowOccurred">
            <summary>
            True, if a buffer overflow has been occurred since the last call of GetValues.
            (A buffer overflow happens if valuesAdded> bufferSize+valuesFetched)
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.StartTime">
            <summary>
            Start time of measurement. 
            If measurement has been started synchronized StartTime is the earliest timestamp of
            all signals (after they have been synchronized) that take part in measurement.
            If measurement has been started unsynchronized StartTime is 0
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValuesCircularBuffer.NumberOfNewValuesSinceLastAdd">
            <summary>
            Gets the count of new values since the last data fetch.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Signals.AnalogInSignal">
            <summary>
            Represents a measurement signal delivered by a physical sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Signals.AnalogInSignal.SelectedFilter">
            <summary>
            Filter that is used to filter the measurement values during a continuous measurement
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Signals.CanInSignal">
            <summary>
            Represents measurement signal delivered by a CAN sensor
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Channels.AnalogInChannel">
            <summary>
            A channel to which a sensor can be connected.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.AnalogInChannel.Sensor">
            <summary>
            The physical sensor connected to the device through a connector.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.AnalogInChannel.Zero">
            <summary>
            The zero offset for this analog in channel.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.AnalogInChannel.AutoCalibrationMode">
            <summary>
            Mode that decribes how to automatically recalibrate this channel
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Device">
            <summary>
            Represents a single device
            </summary>
            <remarks>Normally the properties of the device object will be set after the device has been connected. 
            Scanning for devices returns a list of devices with partially set properties. The scan mechanism fills
            following properties: <see cref="P:Hbm.Api.Common.Entities.Device.ConnectionInfo"/>, <see cref="P:Hbm.Api.Common.Entities.Device.FamilyName"/>, <see cref="P:Hbm.Api.Common.Entities.Device.FirmwareVersion"/>,
            <see cref="P:Hbm.Api.Common.Entities.Device.Model"/>, <see cref="P:Hbm.Api.Common.Entities.Device.Name"/>, <see cref="P:Hbm.Api.Common.Entities.Device.SerialNo"/>.</remarks>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.#ctor">
            <summary>
            Constructor. Init default values
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.AssignConnector(Hbm.Api.Common.Entities.Connectors.Connector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the settings of the given connector (including channels, sensor, signals etc.)
            to the physical connector of the device.
            Warnings and errors during assign process are collected in list of problems.
            </summary>
            <param name="connector">Existing (modified) connector</param>
            <param name="problems"> Warnings and errors that occurred during assign process</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connector"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownConnectorException">Thrown, if connector does not belong to this device</exception>
            <returns><c>true</c> if no problem occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.AssignChannel(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the settings of the given channel (including sensor, signals etc.)
            to the physical channel of the device.
            Warnings and errors during assign process are collected in list of problems.
            </summary>
            <param name="channel">Existing (modified) channel</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="channel"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownChannelException">Thrown, if channel does not belong to this device</exception>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.AssignSignal(Hbm.Api.Common.Entities.Signals.Signal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the settings of the given signal
            to the physical signal of the device.
            Warnings and errors during assign process are collected in list of problems.
            </summary>
            <param name="signal">Existing (modified) signal</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="signal"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownSignalException">Thrown, if signal does not belong to this device</exception>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.AssignSensor(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the sensor settings of the given channel to the physical channel
            of the device.
            Warnings and errors during assign process are collected in list of problems. 
            </summary>
            <param name="channel">Existing (modified) channel</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.AssignZero(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the zero settings of the given channel to the physical channel
            of the device.
            Warnings and errors during assign process are collected in list of problems. 
            </summary>
            <param name="channel">Existing (modified) channel</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.AssignAutoCalibrationMode(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the <see cref="T:Hbm.Api.Common.Enums.AutoCalibrationMode"/> of the given channel to the physical channel
            of the device.
            Warnings and errors during assign process are collected in list of problems. 
            </summary>
            <param name="channel">Existing (modified) channel</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.AssignTimeSource(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the <see cref="P:Hbm.Api.Common.Entities.Device.TimeSource"/> to the device.
            Warnings and errors during assign process are collected in list of problems.
            </summary>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetTimeSourceQuality(System.Double@,System.String@)">
            <summary>
            Returns the offset (timespan between synchronization time source and time of device) in ms and a <see cref="P:Hbm.Api.Common.Entities.Device.TimeSource"/> dependent
            string with further information about the quality of the synchronization.
            For <see cref="T:Hbm.Api.Common.Entities.TimeSources.NtpTimeSource"/> this string includes the parameters (comma seperated): "remote, refid, st, t, when, poll, reach, delay, offset, jitter"
            For <see cref="T:Hbm.Api.Common.Entities.TimeSources.PtpTimeSource"/> this string includes the following parmeters (comma seperated): "GrandmasterID, SyncMode, TimeScaleFlags, UtcOffset, UtcOffsetUsed, MasterOffset"
            </summary>
            <param name="offsetInMs">Offset to time source in milliseconds, <see cref="F:System.Double.MaxValue"/> if offset can not be determined</param>
            <param name="quality">TimeSource type dependent information about the synchronization quality.</param> 
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetSupportedSensorTypes(Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Get a list of supported sensor types for a given channel
            </summary>
            <param name="channel">Channel, whose possible sensor types you want to get</param>
            <returns>List of possible sensor types</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="channel"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownChannelException">Thrown, if channel does not belong to this device</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetSupportedFilterFrequencies(Hbm.Api.Common.Entities.Filters.Filter)">
            <summary>
            Get a list of supported filter frequencies for given filter
            </summary>
            <param name="filter">Filter, whose possible filter frequencies you want to get</param>
            <returns>List of possible filter frequencies</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filter"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownFilterException">Thrown, if filter does not belong to this device</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetSupportedSampleRates(Hbm.Api.Common.Entities.Signals.Signal)">
            <summary>
            Get a list of supported sample rates
            </summary>
            <param name="signal">Signal, whose possible sample rates you want to get</param>
            <returns>List of possible sample rates</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="signal"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownSignalException">Thrown, if signal does not belong to this device</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetSupportedScalingTypes(Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Get a list of supported scaling types for given channel
            </summary>
            <param name="channel">Channel, whose possible scaling types you want to get</param>
            <returns>List of possible scaling types</returns>
            <remarks>Possible scaling types may also depend on the current sensor of the channel!</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="channel"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownChannelException">Thrown, if channel does not belong to this device</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.ReadSingleMeasurementValue(System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})">
            <summary>
            Obtains a single measurement value for each given <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/> without initializing a complete DAQ session.
            Filter settings will be ignored.
            The measurement value is internally saved in <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/> and can be obtained from there by calling <see cref="M:Hbm.Api.Common.Entities.Signals.Signal.GetSingleMeasurementValue"/>.
            </summary>
            <remarks>If the device does not support time stamps for single measurement values, the current time of your 
            PC will be used to generate a time stamp.</remarks>
            <param name="measurementSignals">Signals to get measurement values from</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.ReadSingleMeasurementValueOfAllSignals">
            <summary>
            Obtains a single measurement value for all <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/>s of the device without initializing a complete DAQ session.
            Filter settings will be ignored.
            The measurement values are internally saved in <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/> and can be obtained from there by calling <see cref="M:Hbm.Api.Common.Entities.Signals.Signal.GetSingleMeasurementValue"/>.
            </summary>
            <remarks>If the device does not support time stamps for single measurement values, the current time of your 
            PC will be used to generate a time stamp.</remarks>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.SetDigitalIO(Hbm.Api.Common.Entities.Signals.DigitalSignal,Hbm.Api.Common.Enums.DigitalValueType)">
            <summary>
            Sets the digital signal according to the given value
            </summary>
            <param name="digitalSignal">Digital signal to adjust</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.SetAnalogOut(Hbm.Api.Common.Entities.Signals.AnalogOutSignal,System.Decimal)">
            <summary>
            Sets the analog out signal to the given value
            </summary>
            <param name="analogOutSignal">Analog out signal to adjust</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.SetInputSignalReference(Hbm.Api.Common.Entities.Channels.IInputSignalReference,Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the reference of an input signal to the given <paramref name="channel"/>. 
            The reference consists of the input signal's device and the input signal itself.
            </summary>
            <param name="channel">(Output) channel, which will contains the input signal reference</param>
            <param name="inputSignalDevice">Device of the input signal</param>
            <param name="inputSignal">Input signal</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.SetChannelName(Hbm.Api.Common.Entities.Channels.Channel,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns a channel name to the given <paramref name="channel"/>. 
            </summary>
            <remarks>
            The implementation should call <see cref="M:Hbm.Api.Common.Messaging.MessageBroker.RaiseChannelNameChangedAsync(Hbm.Api.Common.Messaging.ChannelEventArgs)"/> 
            after a successful assignment of the channel name.
            </remarks>
            <param name="channel">Channel, which will be renamed</param>
            <param name="channelName">New name of the channel</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.SetSignalName(Hbm.Api.Common.Entities.Signals.Signal,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns a signal name to the given <paramref name="signal"/>. 
            </summary>
            <remarks>
            The implementation should call <see cref="M:Hbm.Api.Common.Messaging.MessageBroker.RaiseSignalNameChangedAsync(Hbm.Api.Common.Messaging.SignalEventArgs)"/> 
            after a successful assignment of the signal name.
            </remarks>
            <param name="signal">Signal, which will be renamed</param>
            <param name="signalName">New name of the signal</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.SetUnit(Hbm.Api.Common.Entities.Channels.Channel,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the unit of the given channel
            </summary>
            <param name="channel">Channel whose unit should be set</param>
            <param name="unit">Unit to assign</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.SetCanChannelActivation(System.Collections.Generic.List{Hbm.Api.Common.Entities.Channels.Channel},System.Boolean,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Activates or deactivates the given list of channels. Only <see cref="T:Hbm.Api.Common.Entities.Channels.CanInChannel"/> and
            <see cref="T:Hbm.Api.Common.Entities.Channels.CanOutChannel"/> can be activated or deactivated. 
            </summary>
            <param name="canChannels">Channels that should be activated or deactivated</param>
            <param name="activated">True, if given channels should be activated</param>
            <param name="problems">Warnings and errors that occurred during activation/deactivation process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.SetCanBusParameters(Hbm.Api.Common.Entities.Connectors.CanConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns all CAN bus parameters of the given <see cref="T:Hbm.Api.Common.Entities.Connectors.CanConnector"/> (e.g. <see cref="P:Hbm.Api.Common.Entities.Connectors.CanConnector.BitRate" Text="CanConnector.BitRate"/>,
            <see cref="P:Hbm.Api.Common.Entities.Connectors.CanConnector.IsTerminated"/>, <see cref="P:Hbm.Api.Common.Entities.Connectors.CanConnector.SupplyVoltage"/>, etc.) but NOT its channels.
            </summary>
            <param name="canConnector">Existing (modified) <see cref="T:Hbm.Api.Common.Entities.Connectors.CanConnector"/> whose properties should be assigned</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.SetShunt(Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.ShuntMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Sets the configuration of the shunt output of the given connector
            </summary>
            <param name="connector">Connector whose shunt output should be set</param>
            <param name="mode"><see cref="T:Hbm.Api.Common.Enums.ShuntMode"/> for given connector.</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.SetShunt(System.Collections.Generic.List{Hbm.Api.Common.Entities.Connectors.Connector},Hbm.Api.Common.Enums.ShuntMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Sets the configurations of the shunt outputs of the given connectors
            </summary>
            <param name="connectors">Connectors whose shunt outputs should be set</param>
            <param name="mode"><see cref="T:Hbm.Api.Common.Enums.ShuntMode"/> for given connectors.</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetShunt(Hbm.Api.Common.Entities.Connectors.Connector)">
            <summary>
            Gets the <see cref="T:Hbm.Api.Common.Enums.ShuntMode"/> for the given connector
            </summary>
            <param name="connector">Connector from which to get its <see cref="T:Hbm.Api.Common.Enums.ShuntMode"/></param>
            <returns><see cref="T:Hbm.Api.Common.Enums.ShuntMode"/> of given connector</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetShunt(System.Collections.Generic.List{Hbm.Api.Common.Entities.Connectors.Connector})">
            <summary>
            Gets the <see cref="T:Hbm.Api.Common.Enums.ShuntMode"/> for the given connectors
            </summary>
            <param name="connectors">List of connectors from which to get their <see cref="T:Hbm.Api.Common.Enums.ShuntMode"/></param>
            <returns>List of <see cref="T:Hbm.Api.Common.Enums.ShuntMode"/> of given connectors</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetDeviceStatusList(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Gets the list of device statuses.
            </summary>
            <param name="problems">List of warnings and/or errors that occurred during the process or empty list.</param>
            <returns>The list of device statuses.</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetDeviceStatusList(Hbm.Api.Common.Entities.Connectors.Connector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Gets the list of device statuses for the given connector.
            </summary>
            <param name="connector">Connector to get the statuses for.</param>
            <param name="problems">List of warnings and/or errors that occurred during the process or empty list.</param>
            <returns>The list of device statuses.</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetDeviceStatusList(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Gets the list of device statuses for the given channel.
            </summary>
            <param name="channel">Channel to get the statuses for.</param>
            <param name="problems">List of warnings and/or errors that occurred during the process or empty list.</param>
            <returns>The list of device statuses.</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetDeviceErrorStatusList(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Gets the list of device error statuses.
            </summary>
            <param name="problems">List of warnings and/or errors that occurred during the process or empty list.</param>
            <returns>The list of device error statuses.</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetDeviceErrorStatusList(Hbm.Api.Common.Entities.Connectors.Connector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Gets the list of device error statuses for the given connector.
            </summary>
            <param name="connector">Connector to get the statuses for.</param>
            <param name="problems">List of warnings and/or errors that occurred during the process or empty list.</param>
            <returns>The list of device error statuses.</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetDeviceErrorStatusList(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Gets the list of device error statuses for the given channel.
            </summary>
            <param name="channel">Channel to get the statuses for.</param>
            <param name="problems">List of warnings and/or errors that occurred during the process or empty list.</param>
            <returns>The list of device error statuses.</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.FlashLed(Hbm.Api.Common.Enums.LedFlashMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Flashes the device LED in the given mode/color 
            </summary>
            <param name="mode">Mode/color to use for flashing</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.FlashLed(Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.LedFlashMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Flashes the LED of the given connector in the given mode/color 
            </summary>
            <param name="connector">Connector that should be flashing</param>
            <param name="mode">Mode/color to use for flashing</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.FlashLed(System.Collections.Generic.List{Hbm.Api.Common.Entities.Connectors.Connector},Hbm.Api.Common.Enums.LedFlashMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Flashes the LEDs of the given connectors in the given mode/color 
            </summary>
            <param name="connectors">Connectors that should be flashing</param>
            <param name="mode">Mode/color to use for flashing</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.Reset(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Resets the device to its factory default settings. 
            Caution! After this function has been called, the device will be disconnected.
            This is necessary because the parameterization of the device changes by 
            loading the factory defaults and the device therefore will be no longer consistent with the associated object model of the device.
            (When implementing this function, be sure to disconnect the device and to call <see cref="M:Hbm.Api.Common.Messaging.MessageBroker.RaiseDeviceDisconnectedAsync(Hbm.Api.Common.Messaging.DeviceEventArgs)"/> to signal
            that the device has been disconnected.) 
            </summary>
            <param name="problems">Warnings and errors that occurred during resetting the device</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
            <remarks>Notice that the device may be unreachable for a certain time and the device is disconnected after the execution of this function.</remarks>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.Connect(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Connect to the underlying physical device. Must be overridden in derived classes
            </summary>
            <param name="problems">List of warnings and errors that occurred during the connect process</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.ConnectionFailedException">Thrown, if connecting to the device failed.</exception>
            <returns><c>true</c> if no error occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.Disconnect">
            <summary>
            Disconnect from the underlying physical device. Must be overridden in derived classes
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.PrepareDaq(System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})">
            <summary>
            Prepares a continuous measurement session.
            </summary>
            <param name="measurementSignals">The signals which will be used for the measurement.</param>        
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownSignalException">Thrown if <paramref name="measurementSignals"/> contains a signal that does not belong
            to this device.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.PrepareDaqFailedException">Thrown if there were errors during the preparation of the measurement (e.g.
            not supported sample rates or to many sample rates for this device)</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.BeginStartDaq">
            <summary>
            Starts an already prepared (via <c>PrepareDaq</c>) continuous measurement session
            without waiting for any reply of the device. Use this function in combination with
            <c>CompleteConcurrentStartDaq</c>.
            This function has to return as fast as possible to be able to start as many devices
            as possible in a minimum of time.
            In a typical realization you would e.g. send the start command to your device without
            waiting for an answer. Use the <c>EndStartDaq</c> function to check 
            the answer of the start command.
            This approach asserts that starting n devices does not take significantly longer 
            than starting one device only.
            </summary>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqStartFailedException">Thrown, if there was a problem during start of the data acquisition.</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.EndStartDaq">
            <summary>
            Ends the concurrent start of data acquisition (initiated via <c>BeginStartDaq</c>)
            Use this function to check if the data acquisition of this device could be started.
            </summary>
            <exception cref="T:Hbm.Api.Common.Exceptions.DaqStartFailedException">Thrown, if there was a problem during start of the data acquisition.</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.ReadDaqValues">
            <summary>
            Updates the <c>Signal.CircularBuffer</c> of all signals that take part in the continuous measuring
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.StopDaq">
            <summary>
            Stops a running continuous measurement session
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetUniqueID">
            <summary>
            Returns a unique string that identifies the device among all device families.
            </summary>
            <remarks>The ID consists by default of the <see cref="P:Hbm.Api.Common.Entities.Device.FamilyName"/> and the <see cref="P:Hbm.Api.Common.Entities.Device.SerialNo"/> with a hyphen in between. Property <see cref="P:Hbm.Api.Common.Entities.Device.SerialNo"/> needs to be filled before calling this method. Normally this is done during a scan or connect.</remarks>
            <returns>Unique device identification or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.IsConnectorPartOfDevice(Hbm.Api.Common.Entities.Connectors.Connector)">
            <summary>
            Checks, if given connector belongs to device
            </summary>
            <param name="connectorToCheck"></param>
            <returns>true, if connector is a connector of the device</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectorToCheck"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.IsChannelPartOfDevice(Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Checks, if given channel belongs to device
            </summary>
            <param name="channelToCheck">Channel reference to check</param>
            <returns>true, if channel is a channel of the device</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="channelToCheck"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.IsSignalPartOfDevice(Hbm.Api.Common.Entities.Signals.Signal)">
            <summary>
            Checks, if given signal belongs to device
            </summary>
            <param name="signalToCheck">Signal reference to check</param>
            <returns>true, if signal is a signal of the device</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="signalToCheck"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetAllSignals">
            <summary>
            Gets all signals of the device
            </summary>
            <returns>Signal list of the current device</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetAllChannels">
            <summary>
            Gets all channels of the device
            </summary>
            <returns>Channel list of the current device</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.SetZeroBalance(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@,System.Int32)">
            <summary>
             Executes a zero balancing by computing a new <see cref="P:Hbm.Api.Common.Entities.Zero.Offset"/>, 
             using the current <see cref="P:Hbm.Api.Common.Entities.Zero.Target"/> of the given channel.
            </summary>
            <remarks>Only a channel with valid measurement values can be zero balanced!</remarks>
            <param name="channel">Channel to zero balance.</param>
            <param name="problems">Warnings and errors that occurred during execution of zero balancing.</param>
            <param name="numberOfMeasurementValuesToUse">Number of successive measurements (&gt;0, default is 1) to use for zero balancing (averaging).</param>       
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="channel"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="numberOfMeasurementValuesToUse"/> is <c>less or equal than 0</c>.</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.SetZeroBalance(System.Collections.Generic.List{Hbm.Api.Common.Entities.Channels.Channel},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@,System.Int32)">
            <summary>
            Executes a zero balancing by computing new <see cref="P:Hbm.Api.Common.Entities.Zero.Offset"/>s, 
            using the current <see cref="P:Hbm.Api.Common.Entities.Zero.Target"/>s of the given channels.
            </summary>
            <remarks>Only channels with valid measurement values can be zero balanced!</remarks>
            <param name="channels">List of channels to zero balance.</param>
            <param name="problems">Warnings and errors that occurred during execution of zero balancing.</param>
            <param name="numberOfMeasurementValuesToUse">Number of successive measurements (&gt;0, default is 1) to use for zero balancing (averaging).</param>       
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="channels"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="numberOfMeasurementValuesToUse"/> is <c>less or equal than 0</c>.</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.ClearZeroBalance(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Clears zero balance of given channel by setting <see cref="P:Hbm.Api.Common.Entities.Zero.Offset"/> to 0.
            The <see cref="P:Hbm.Api.Common.Entities.Zero.Target"/> value will not be affected!
            </summary>
            <param name="channel">Channel to clear zero balance.</param>
            <param name="problems">Warnings and errors that occurred during clearing zero balance.</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.ClearZeroBalance(System.Collections.Generic.List{Hbm.Api.Common.Entities.Channels.Channel},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Clears zero balance of given channels by setting <see cref="P:Hbm.Api.Common.Entities.Zero.Offset"/> to 0.
            The <see cref="P:Hbm.Api.Common.Entities.Zero.Target"/> values will not be affected!
            </summary>
            <param name="channels">Channels to clear zero balance.</param>
            <param name="problems">Warnings and errors that occurred during clearing zero balances.</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="channels"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.FindConnector(Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Returns connector under which the given channel is located
            </summary>
            <param name="channel">Channel</param>
            <returns>Connector under which the given channel is located or null if the connector can't be found</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.FindConnector(Hbm.Api.Common.Entities.Signals.Signal)">
            <summary>
            Returns connector under which the given signal is located
            </summary>
            <param name="signal">Signal</param>
            <returns>Connector under which the given signal is located or null if the connector can't be found</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.FindConnector(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Returns connector under which the given sensor is located
            </summary>
            <param name="sensor">Sensor</param>
            <returns>Connector under which the given sensor is located or null if the connector can't be found</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.FindChannel(Hbm.Api.Common.Entities.Signals.Signal)">
            <summary>
            Returns channel under which the given signal is located
            </summary>
            <param name="signal">Signal</param>
            <returns>Channel under which the given signal is located or null if the channel can't be found</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.FindChannel(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Returns channel under which the given sensor is located
            </summary>
            <param name="sensor">Sensor</param>
            <returns>Channel under which the given sensor is located or null if the channel can't be found</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.FindSignal(Hbm.Api.Common.Entities.Filters.Filter)">
            <summary>
            Returns signal under which the given filter is located
            </summary>
            <param name="filter">Filter</param>
            <returns>Signal under which the given filter is located or null if the signal can't be found</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.ReadDigitalIO(Hbm.Api.Common.Entities.Signals.DigitalSignal)">
            <summary>
            Returns the current measurement value of a digital signal
            </summary>
            <param name="digitalSignal">Digital signal to get a measurement value from</param>
            <returns>Current measurement value of the given digital signal</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Device.GetUnit(Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Returns the unit of the given channel
            </summary>
            <param name="channel">Channel whose unit should be returned</param>
            <returns>Unit of the given channel</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="channel"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownChannelException">Thrown, if channel does not belong to this device</exception>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.Name">
            <summary>
            Name of device
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.Model">
            <summary>
            Type of device model
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.SerialNo">
            <summary>
            Serial number of device
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.FamilyName">
            <summary>
            Name of the family to which this device belongs
            </summary>
            <remarks>This MUST be exactly the same string as in property FamilyName in class <see cref="T:Hbm.Api.Common.Entities.DeviceFamily"/></remarks>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.IsConnected">
            <summary>
            Indicates if the device is connected
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.IsReadingDaqValues">
            <summary>
            Indicates if the device is updating its measurement values
            <remarks>This is internally used to decide whether a new task for reading values from device is started or not. 
            If the device is still reading DAQ values, we do not start a new task.</remarks> 
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.IsUsingHbmClassicSampleRates">
            <summary>
            Indicates if the device is using the classic HBM sample rates (e.g. 1200 Hz, 2400 Hz, 4800 Hz, ... ) instead of the decimal sample rates ( 10 Hz, 100 Hz, 1000 Hz, ...)
            The property is valid after the device has been connected. At present only the QuantumX device family supports decimal sample rates.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.Timeout">
            <summary>
            Timeout for communication with the device
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.Connectors">
            <summary>
            List of all connectors 
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.ConnectionInfo">
            <summary>
            Info on how to connect to the physical device
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.TimeSource">
            <summary>
            Info on how to synchronize the time of the physical device
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.FirmwareVersion">
            <summary>
            Firmware version. 
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.HardwareVersion">
            <summary>
            Hardware version.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.ProtectionType">
            <summary>
            Ingress Protection type of the device, e.g. IP55
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.IsUnsupportedModel">
            <summary>
            Indicates if a certain model is supported or not by the API
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.SyncLock">
            <summary>
            Used to synchronize parallel access to the underlying device
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.NtpStartDate">
            <summary>
            Date that determines the start date in coordinated univeral time (UTC) for counting seconds.
            Timestamps are expressed in seconds since this date/time.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.SyncMode">
            <summary>
            Mode that defines the role of a device during the start of a measurement
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Device.Overflow">
            <summary>
            Defines the value that will be used instead of an invalid measurement value (overflow). 
            For each measurement value, whose status is invalid, the according measurement value will be set to this overflow value.
            Use <see cref="P:Hbm.Api.Common.DaqEnvironment.Overflow"/> to set this value (default is 1000000).
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Device.ZeroBalancingInfo">
            <summary>
            Helper class for SetZeroBalance function
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.DeviceFamily">
            <summary>
            Abstract base class of all DeviceFamily implementations
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceFamily.#ctor">
            <summary>
            Constructor. Creates new instance 
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceFamily.Finalize">
            <summary>
            Finalizer. Cleans up all resources
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceFamily.Scan">
            <summary>
            Executes a network scan for devices for the concrete device family. Must be overridden in derived classes
            </summary>
            <returns>List of found devices</returns>
            <exception cref="T:Hbm.Api.Scan.Entities.ScanFailedException">Thrown if errors during scan occur.</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceFamily.Init">
            <summary>
            Use this function to initializes all necessary components.
            This function is called by DaqEnvironment class
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceFamily.Exit">
            <summary>
            Use this function e.g. to clean up used components.       
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceFamily.Dispose">
            <summary>
            Clean up all resources
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.DeviceFamily.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this instance
            </summary>
            <param name="disposing">True, if called explicitly (dispose managed and unmanaged resources ; False, if called by GC via finalizer(destructor) only unmanged resources should be released.</param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.DeviceFamily.FamilyName">
            <summary>
            Unique name of the device family. Must be overridden in derived classes
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.DeviceFamily.IsScanSupported">
            <summary>
            Indicates if a device family supports a scan mechanism
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.MeasurementValues">
            <summary>
            Class that holds measurement values of a continuous measurement. To read the measurement values during a
            running data acquisition, you have to call <c>Hbm.API.Common.DaqMeasurement.FillMeasurementValues</c>. This will
            copy a certain number of measurement values from the circular buffer of the signal into the ContinuousMeasurrementValues of the signal.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.MeasurementValues.ResetBuffers">
            <summary>
            Resets the internal buffers and status
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValues.BufferSize">
            <summary>
            Maximum number of measurement values, timestamps and states that can be stored in the buffer
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValues.IsFirstTimeStampOnlyRequested">
            <summary>
            If true, only TimeStamps[0] will be used
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValues.IsFirstStatusOnlyRequested">
            <summary>
            If true, only States[0] will be used
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValues.UpdatedValueCount">
            <summary>
            Number of new measurement values since the last <see cref="M:Hbm.Api.Common.DaqMeasurement.FillMeasurementValues"/> call
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValues.TotalValueCount">
            <summary>
            Total number of acquired measurement values since the start of the measurement
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValues.Values">
            <summary>
            Measurement values 
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValues.Timestamps">
            <summary>
            Timestamps. Seconds since start of the measurement (<see cref="P:Hbm.Api.Common.DaqMeasurement.MeasurementStartTime"/>, <see cref="P:Hbm.Api.Common.DaqMeasurement.MeasurementStartUTCTime"/>)
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValues.States">
            <summary>
            State of the value 
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.MeasurementValues.BufferOverrunOccurred">
            <summary>
            True, if underlying circular buffer registered a buffer overrun. This happens, if 
            the period of fetching measurement values is to long. The "oldest" values in the underlying
            circular buffer have been overwritten since the last request.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Service">
            <summary>
            Represents a service provided by the device, e.g. SCPI etc.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Service.Protocol">
            <summary>
            Supported protocol, e.g. SCPI
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Service.Port">
            <summary>
            Port on which the service resides
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Channels.VirtualChannel">
            <summary>
            A channel without a connected sensor (e.g. a calculated channel).
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Channels.VirtualChannel.Unit">
            <summary>
            Unit of the channel
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Signals.VirtualSignal">
            <summary>
            Represents a measurement signal, not delivered by a physical sensor (e.g. a calculated signal)
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Entities.Zero">
            <summary>
            Zero offset of an analog in channel
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Zero.#ctor">
            <summary>
            Initializes a new (empty) instance of the <see cref="T:Hbm.Api.Common.Entities.Zero"/> class.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.Zero.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.Common.Entities.Zero"/> class.
            </summary>
            <param name="offset">Offset (value to deduct from measurement values).</param>
            <param name="target">Target (value to be used instead of zero after zeroing).</param>
            <param name="isZeroBalancingInhibited">Marks if performing of zero balance should not be allowed (if value is <c>true</c>).</param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Zero.Offset">
            <summary>
            Offset (value to deduct from measurement values) 
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Zero.Target">
            <summary>
             Target (value to be used instead of zero after zeroing)
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.Zero.IsZeroBalancingInhibited">
            <summary>
            Marks if performing of zero balance should not be allowed (if value is <c>true</c>).
            </summary>
            <remarks>Notice that it is still possible to set <see cref="P:Hbm.Api.Common.Entities.Zero.Offset"/> and <see cref="P:Hbm.Api.Common.Entities.Zero.Target"/> - also if
            <see cref="P:Hbm.Api.Common.Entities.Zero.IsZeroBalancingInhibited"/> is set to true.
            Only the function <see cref="M:Hbm.Api.Common.Entities.Device.SetZeroBalance(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@,System.Int32)"/> considers this property.</remarks>
        </member>
        <member name="T:Hbm.Api.Common.Enums.SettingType">
            <summary>
            The object type, whose settings have been adapted
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SettingType.Device">
            <summary>
            Device
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SettingType.Connector">
            <summary>
            Connector
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SettingType.Channel">
            <summary>
            Channel
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SettingType.Sensor">
            <summary>
            Sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SettingType.Signal">
            <summary>
            Signal
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SettingType.Filter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SettingType.Zero">
            <summary>
            Zero
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SettingType.Scaling">
            <summary>
            Scaling
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SettingType.AdditionalFeature">
            <summary>
            Any additional feature of a specific device 
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SettingType.ConnectionInfo">
            <summary>
            Connection info
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SettingType.TimeSource">
            <summary>
            Time source
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.MeasurementValueState">
            <summary>
            Status of a measurement value
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.MeasurementValueState.Valid">
            <summary>
            Measurement value is valid
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.MeasurementValueState.Overflow">
            <summary>
            Measurement value runs into overflow
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.DataAcquisitionMode">
            <summary>
            Modus of the data acquisition.
            </summary>
            <remarks>
            DataAquisitionMode defines the procedure that is used to synchronize different devices during the start of a measurement (<c>DaqMeasurement.StartDaq</c>)
            and also the way measurement values will be provided (<c>DaqMeasurement.FillMeasurementValues</c>).
            </remarks>                                                                                    
        </member>
        <member name="F:Hbm.Api.Common.Enums.DataAcquisitionMode.TimestampSynchronized">
            <summary>
            Use this mode, if the synchronization of the devices should be 
            done by using the timestamps of the delivered measurement values. (E.g.: A compound of QuantumX devices delivers equal timestamps if they are
            connected via FireWire cable. A compound of PMX devices should use the same NTP server to deliver synchronized timestamps.)
            Equidistant and not equidistant (asynchronous) signals may be mixed.
            Not equidistant signals have to sent values before given timeout in
            <c>DaqMeasurement.StartDaq</c> occurres.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.DataAcquisitionMode.HardwareSynchronized">
            <summary>
            Use HardwareSynchronized if the devices are synchronized by hardware (cable) and are able to deliver a concurrent first measurement value
            for all signals. (E.g.: A compound of MGC devices that are connected via sync cable and are proper configured (master/slave)
            deliver a concurrent first measurement value for all signals.)
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.DataAcquisitionMode.Unsynchronized">
            <summary>
            Use Unsynchronized to start a measurement without any synchronization. 
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.SynchronMode">
            <summary>
            Modus that describes the kind of measurement delivery of a signal
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SynchronMode.Equidistant">
            <summary>
            Timestamps of the measurement values of a signal do all have the same time delta
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SynchronMode.NonEquidistant">
            <summary>
            Timestamps of the measurement values of a signal do have various, unpredictable time delta
            This is typical for asynchronous CAN sensor measurement values
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.DataRateDomainType">
            <summary>
            Type of the data rate domain.
            </summary>
            <remarks>
            This mode is required for streaming devices.
            The values are set according to the QuantumX domain rates.
            </remarks>
        </member>
        <member name="F:Hbm.Api.Common.Enums.DataRateDomainType.Classic">
            <summary>
            Classic data rate domain
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.DataRateDomainType.Decimal">
            <summary>
            Decimal data rate domain
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.DataRateDomainType.Binary">
            <summary>
            Binary data rate domain
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.SyncModeType">
            <summary>
            Type of the synchronization mode
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SyncModeType.Standalone">
            <summary>
            Stand alone measurement. Device is not hardware synchronized with other devices
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SyncModeType.Slave">
            <summary>
            Start of measurement is triggered by another device (which acts as master)
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.SyncModeType.Master">
            <summary>
            This device triggers the start of a measurement for other devices of this device family
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.DirectionType">
            <summary>
            Type of the direction of a digital IO connector
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.DirectionType.In">
            <summary>
            Input
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.DirectionType.Out">
            <summary>
            Output
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.OutputScalingType">
            <summary>
            Type of an output scaling of an analog out connector
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.OutputScalingType.NotSupported">
            <summary>
            Not supported scaling
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.OutputScalingType.Table">
            <summary>
            Table scaling
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.OutputScalingType.Off">
            <summary>
            No scaling is used (off)
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.DigitalValueType">
            <summary>
            Type of a digital value
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.DigitalValueType.Low">
            <summary>
            Low (analogous to 0 or off status)
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.DigitalValueType.High">
            <summary>
            High (analogous to 1 or on status) 
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.ErrorResetMode">
            <summary>
            Defines how CAN errors or warnings are removed after the error was solved.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ErrorResetMode.NotSupported">
            <summary>
            feature not supported
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ErrorResetMode.OnRead">
            <summary>
            errors or warnings persist until status is read
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ErrorResetMode.Delayed">
            <summary>
            errors or warnings are removed with delay after the error was solved
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.ConnectorConnectedValueType">
            <summary>
            Defines the values for the value parameter of <see cref="T:Hbm.Api.Common.Entities.Statuses.ConnectorConnectedStatus"/>.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ConnectorConnectedValueType.NotSupported">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ConnectorConnectedValueType.NotConnected">
            <summary>
            The connector has no sensor connected.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ConnectorConnectedValueType.IsConnected">
            <summary>
            The connector has a sensor connected.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.ConnectorParamBusyValueType">
            <summary>
            Defines the values for the value parameter of <see cref="T:Hbm.Api.Common.Entities.Statuses.ConnectorParamBusyStatus"/>.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ConnectorParamBusyValueType.NotSupported">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ConnectorParamBusyValueType.NotBusy">
            <summary>
            The connector is not busy with parameterization.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ConnectorParamBusyValueType.Busy">
            <summary>
            The connector is busy with parameterization.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.ChannelOverflowValueType">
            <summary>
            Defines the values for the value parameter of <see cref="T:Hbm.Api.Common.Entities.Statuses.ChannelOverflowStatus"/>.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ChannelOverflowValueType.NotSupported">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ChannelOverflowValueType.NoMeasValOverflow">
            <summary>
            The channel is not in overflow status (measurement value).
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ChannelOverflowValueType.MeasValOverflow">
            <summary>
            The channel is in overflow status (measurement value).
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.TedsValidationValueType">
            <summary>
            Defines the values for the value parameter of <see cref="T:Hbm.Api.Common.Entities.Statuses.ChannelTedsStatus"/>.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.TedsValidationValueType.NotSupported">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.TedsValidationValueType.TedsNotAvailable">
            <summary>
            A TEDS chip is not available.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.TedsValidationValueType.TedsConnected">
            <summary>
            A TEDS chip is connected (TID is readable, no information concerning TEDS parameter realized for sensor!).
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.TedsValidationValueType.TedsValid">
            <summary>
            A TEDS chip is available and OK.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.TedsValidationValueType.TedsChecksumError">
            <summary>
            A TEDS chip is available but with checksum error (probably corrupt, maybe empty).
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.TedsValidationValueType.TedsDataEmpty">
            <summary>
            A TEDS chip is available but empty (no data).
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.TedsValidationValueType.TedsDataNotSupportedByConnector">
            <summary>
            A TEDS chip is available but TEDS data is not supported by the connector.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.TedsValidationValueType.TedsDataParamBusy">
            <summary>
            A TEDS chip is available but validation of TEDS parameters is busy (please wait).
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.TedsValidationValueType.TedsDataNotUsed">
            <summary>
            A TEDS chip is present, not empty, not corrupted, but not used.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.TedsValidationValueType.DeviceSpecific">
            <summary>
            Device specific status (use <c>DeviceSpecificValue</c> from derived class).
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.ShuntMode">
            <summary>
            Mode that describes the configuration of the shunt output
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ShuntMode.NotSupported">
            <summary>
            Shunt output is not supported by a connector (setting it to another value will cause a <see cref="T:Hbm.Api.Common.Entities.Problems.ValueNotSetError"/> during assignment) 
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ShuntMode.Disabled">
            <summary>
            Shunt is switched off
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.ShuntMode.Enabled">
            <summary>
            Shunt is activated
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.AutoCalibrationMode">
            <summary>
            Mode that describes how to automatically recalibrate a channel
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.AutoCalibrationMode.NotSupported">
            <summary>
            AutoCalibration is not supported by a channel (setting it to another value will cause a <see cref="T:Hbm.Api.Common.Entities.Problems.ValueNotSetError"/> during assignment) 
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.AutoCalibrationMode.Default">
            <summary>
            Default (the device itself decides which mode to use)
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.AutoCalibrationMode.AutoAdjust">
            <summary>
            Use auto adjust (the device uses a parallel amplifier to adjust the amplifier of the channel, so the measurement values won't freeze during calibration process)
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.AutoCalibrationMode.AutoCalibrate">
            <summary>
            Use auto calibrate (the device uses the amplifier of the same channel to do the calibration, so the measurement values may freeze for some ms during the calibration process)
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.AutoCalibrationMode.Off">
            <summary>
            The device executes no automatic calibration for the channel
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.LedFlashMode">
            <summary>
            LED flash colors 
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.LedFlashMode.Off">
            <summary>
            Switch off flashing
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.LedFlashMode.Green">
            <summary>
            Flash red
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.LedFlashMode.Yellow">
            <summary>
            Flash green
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.LedFlashMode.Red">
            <summary>
            Flash yellow
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.DelayMechanism">
            <summary>
            PTP Delay mechanism used to synchronize time of device
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.DelayMechanism.Auto">
            <summary>
            Automatic delay mechanism.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.DelayMechanism.E2E">
            <summary>
            Delay request-response.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.DelayMechanism.P2P">
            <summary>
            Peer delay mechanism
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Enums.TransportMode">
            <summary>
            The PTP network transport protocols used to synchronize the device
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.TransportMode.IEEE">
            <summary>
            IEEE protocol.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.TransportMode.UdpIpV4">
            <summary>
            UDP IPv4.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Enums.TransportMode.UdpIpV6">
            <summary>
            UDP IPv6.
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.ConnectionFailedException">
            <summary>
            Thrown, if a connection to a device could not be established
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.ConnectionFailedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.ConnectionFailedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.ConnectionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException">
            <summary>
            Thrown, if the user calls a function that can not be executed while data acquisition is running.
            (E.g. DaqMeasurement.StartDaq, DaqMeasurement.PrepareDaq, DaqMeasurement.RegisterForMeasurement etc.)
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqAlreadyStartedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.DaqNoSignalsPreparedException">
            <summary>
            Thrown, if the user calls <c>StartDaq</c> without any registered (<c>RegisterForMeasurement</c>) and prepared (<c>PrepareDaq</c> signals 
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqNoSignalsPreparedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqNoSignalsPreparedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqNoSignalsPreparedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.DaqNoSignalsAddedException">
            <summary>
            Thrown, if the user calls <c>PrepareDaq</c> without any added signals (<c>AddSignals</c>)
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqNoSignalsAddedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqNoSignalsAddedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqNoSignalsAddedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.DaqNotStartedException">
            <summary>
            Thrown, if the user tries to execute a function that needs data acquisition running.
            (E.g. DaqMeasurement.StopDaq or DaqMeasurement.FillMeasurementValues, etc.)
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqNotStartedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqNotStartedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqNotStartedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.DeviceFamilyNotFoundException">
            <summary>
            Thrown, if demanded device family could not be found
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DeviceFamilyNotFoundException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DeviceFamilyNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DeviceFamilyNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.DeviceFamilyAlreadyExistsException">
            <summary>
            Thrown, if the user attempts to register a device family, that is already registered
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DeviceFamilyAlreadyExistsException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DeviceFamilyAlreadyExistsException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DeviceFamilyAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.FamilyNameNotSetException">
            <summary>
            Thrown, if there is no family name given to register a device family
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.FamilyNameNotSetException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.FamilyNameNotSetException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.FamilyNameNotSetException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.PrepareDaqFailedException">
            <summary>
            Thrown, if an error occurs during preparing a measurement via DaqMeasurement.PrepareDaq()
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.PrepareDaqFailedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.PrepareDaqFailedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.PrepareDaqFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.DaqStartFailedException">
            <summary>
            Thrown, if an error occurs during the start of a measurement
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqStartFailedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqStartFailedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.DaqStartFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.UnknownChannelException">
            <summary>
            Thrown, if channel is unknown to a specific device
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.UnknownChannelException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.UnknownChannelException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.UnknownChannelException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.UnknownConnectorException">
            <summary>
            Thrown, if connector is unknown to a specific device
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.UnknownConnectorException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.UnknownConnectorException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.UnknownConnectorException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.UnknownFilterException">
            <summary>
            Thrown, if filter is unknown to a specific device
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.UnknownFilterException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.UnknownFilterException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.UnknownFilterException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Exceptions.UnknownSignalException">
            <summary>
            Thrown, if a signal is unknown to a specific device
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.UnknownSignalException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.UnknownSignalException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.Common.Exceptions.UnknownSignalException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.Common.Core.ProducerConsumerQueue">
            <summary>
            Producer-Consumer-Queue, implementiert durch Wait-Pulse-Verfahren
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.ProducerConsumerQueue.#ctor(System.Int32)">
            <summary>
            Instanziiert Producer-Consumer-Queue und erstellt Consumer Threadpool
            </summary>
            <param name="numberOfConsumerThreads"></param>
        </member>
        <member name="M:Hbm.Api.Common.Core.ProducerConsumerQueue.EnqueueItem(System.Action)">
            <summary>
            Fügt der Queue ein neues Element hinzu
            </summary>
            <param name="item">Auszuführende Arbeit</param>
        </member>
        <member name="M:Hbm.Api.Common.Core.ProducerConsumerQueue.ResetItemCounter">
            <summary>
            Setz den ItemCounter zurück auf 0
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.ProducerConsumerQueue.Dispose">
            <summary>
            Beendet alle Consumer Threads und damit die gesamte Queue.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.ProducerConsumerQueue.DoWork">
            <summary>
            Erledigt die eigentliche Arbeit
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Core.ProducerConsumerQueue.UnProcessedItemCount">
            <summary>
            Anzahl durch die Queue unbearbeiteter Elemente
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Messaging.SignalEventArgs">
            <summary>
            Provides the data for signal status events, like <see cref="E:Hbm.Api.Common.Messaging.MessageBroker.SignalNameChanged"/>
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Messaging.SignalEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the SignalEventArgs class.
            </summary>
            <param name="uniqueDeviceID">Unique identifier of the channel's device</param>
            <param name="uniqueSignalID">Unique signal identifier (on the device <paramref name="uniqueDeviceID"/>)</param>
        </member>
        <member name="P:Hbm.Api.Common.Messaging.SignalEventArgs.UniqueDeviceID">
            <summary>
            Unique device ID
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Messaging.SignalEventArgs.UniqueSignalID">
            <summary>
            Unique signal ID (unique only for the device with <see cref="P:Hbm.Api.Common.Messaging.SignalEventArgs.UniqueDeviceID"/>)
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.DaqEnvironment">
            <summary>
            By calling DaqEnvironment.GetInstance() (DaqEnvironment is a
            singleton!), the system determines all pluggable DeviceFamily
            implementations (by analyzing the file DeviceDriver.plugins) 
            within the directory of the executable and registers them.
            
            After that, you are able to query registered device families
            and you can scan for and connect to any device, that belongs
            to one of the registered families.
            
            After a device is connected, the Device object contains the
            full object representation of the physical device. Each
            Device has a list of Connector objects. Each of these
            Connector objects has a list of Channel objects and each
            Channel object has a list of Signal objects and (in case of
            an AnalogInChannel) a Sensor object.
            
            You may change now any properties of Channel(e.g. Name or
            Sensor) or Signal(e.g. Filter or SampleRate) objects to
            prepare your measurement task.
            <paraattr align="center">
            <img name="ShortOverview"/>
            </paraattr>
            After changing properties of these objects, you have to send
            the changes to the physical device. Depending on the changed
            \objects, you have to call one of the functions
              * Device.AssignConnector(..) - assigns also all channels,
                signals, sensors and zero settings under the connector,
              * Device.AssignChannel(..) -- assigns also all signals, the
                sensor and zero settings under the channel,
              * Device.AssignSensor(..),
              * Device.AssignSignal(..) or
              * Device.AssignZero(..).
            If there are unfitting or invalid settings for the specific
            device, you will get a list of Problem objects that describe
            the problems, occurred during the assign process. Unfitting
            settings will result in a Warning, invalid settings will
            \result in an Error within this list of Problem objects.
            
            When the assignments of the settings were successful, you can
            go on and prepare the data acquisition by adding certain
            signals of chosen devices to the measurement. This is supported by the
            DaqMeasurement object.
            
            Assert to call <see cref="M:Hbm.Api.Common.DaqEnvironment.Dispose" text="DaqEnvironment.Dispose()"/>
            before program ends.
            </summary>
            <remarks>
            Offers access to the whole system with all devices. A user
            should start here to find all devices.
            </remarks>
            <example>
            <code>
            ...
            List&lt;Problem&gt; lastProblems; <i>// Used to return warnings and errors</i>
            DaqEnvironment daqEnvironment = DaqEnvironment.GetInstance();            <i>// Determine all plugable DeviceFamily implementations</i>
            List&lt;Device&gt; devices = daqEnvironment.Scan();                            <i>// Scan entire system for all supported devices</i>
            <i>// List&lt;Device&gt; devices=daqEnvironment.Scan(new List&lt;String&gt; { "PMX" }); // Scan system for PMX devices only!</i>
            daqEnvironment.Connect(devices[0], out lastProblems);                    <i>// Connect to first found device</i>
            <i>// Try to configure a voltage sensor at the first channel of the device</i>
            <i>// Check if channel is an AnalogInChannel (VirtualChannels do not accept a sensor!)</i>
            <b>if</b> (devices[0].Connectors[0].Channels[0] <b>is</b> AnalogInChannel)
            {
                <i>// Create a new voltageSensor</i>
                Sensor voltageSensor = SensorFactory.CreateSensor(SensorType.Voltage);
                <i>// and attach it to a certain channel</i>
                (devices[0].Connectors[0].Channels[0] <b>as</b> AnalogInChannel).Sensor = voltageSensor;
                <i>// Assign functions always fill a List&lt;Problems&gt; that contains warnings or errors</i>
                <i>// that occurred during the assignment process</i>
                <i>// Assign new VoltageSensor at the used channel..</i>
                <b>if</b> (devices[0].AssignSensor(devices[0].Connectors[0].Channels[0], <b>out</b> lastProblems))
                {
                    <i>// Success, no error has occurred.</i>
                }
                <b>else</b> 
                {
                    <i>//all AssignXXX functions return false, if any Error occurred during assignment</i>
                }
                Debug.Print("There were {0} problems during assign:", lastProblems.Count);
                <b>foreach</b> (Problem problem <b>in</b> lastProblems)
                {
                     Debug.Print("ProblemType={0}; Message={1}", problem.GetType(), problem.Message);
                }
            }
            ...
            daqEnvironment.Dispose();
            ...
            </code>
            
            </example>                                                                                                                                
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.#ctor">
            <summary>
            Constructor. Reads all available DeviceFamilies 
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.Finalize">
            <summary>
            Destructor. Cleans up all things if not yet done....
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.GetInstance">
            <summary>
            Use this to get an instance of DaqEnvironment (Singleton)
            </summary>
            <returns>Instance of DaqEnvironment</returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.Dispose">
            <summary>
            Releases all used resources
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.Scan">
            <summary>
            Executes scan on all available DeviceFamilies and returns a list of all found devices
            </summary>
            <returns>List of all found devices</returns>
            <exception cref="T:Hbm.Api.Scan.Entities.ScanFailedException">Thrown if errors during scan occur.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.Scan(System.String)">
            <summary>
            Executes scan on given DeviceFamily and returns a list of found devices
            </summary>
            <param name="familyName">Name of DeviceFamily for which a scan is executed (e.g. "MGC", "PMX" or "QuantumX")</param>
            <returns>List of all found devices</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="familyName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.Scan(System.Collections.Generic.List{System.String})">
            <summary>
            Executes scan on all given DeviceFamilies and returns a list of found devices
            </summary>
            <param name="familyNames">List of DeviceFamilies for which a scan is executed</param>
            <returns>List of all found devices</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="familyNames"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.GetAvailableDeviceFamilyNames">
            <summary>
            Determines a list of all available DeviceFamilies. 
            </summary>
            <returns>List of all available DaviceFamilies</returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.GetScanableDeviceFamilyNames">
            <summary>
            Determines a list of all scanable DeviceFamilies. 
            </summary>
            <returns>List of all scanable DaviceFamilies</returns>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.GetVersionInfos">
            <summary>
            Returns a list of used assemblies and their version numbers
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.Connect(System.Collections.Generic.List{Hbm.Api.Common.Entities.Device},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Connect multiple devices at once
            </summary>
            <remarks>
            The given devices are connected in parallel. Each device raises a <b>DeviceConnected</b> event through the <see cref="T:Hbm.Api.Common.Messaging.MessageBroker"/> right after it has successfully connected.
            </remarks>
            <param name="devices">List of devices</param>
            <param name="problems">List of warnings and errors that occurred during the connect process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="devices"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.Connect(Hbm.Api.Common.Entities.Device,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Connect one device
            </summary>
            <param name="device">Device to connect</param>
            <param name="problems">List of warnings and errors that occurred during the connect process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
            <exception cref="T:Hbm.Api.Common.Exceptions.ConnectionFailedException">Thrown, if connection to the device failed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="device"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.Disconnect(Hbm.Api.Common.Entities.Device)">
            <summary>
            Disconnect a single device
            </summary>
            <param name="device">Device to disconnect</param>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.Disconnect(System.Collections.Generic.List{Hbm.Api.Common.Entities.Device})">
            <summary>
            Disconnect multiple devices
            </summary>
            <remarks>
            The given devices are disconnected in parallel. Each device raises a <b>DeviceDisconnected</b> event through the <see cref="T:Hbm.Api.Common.Messaging.MessageBroker"/> right after it has been disconnected.
            </remarks>
            <param name="devices">List of devices to disconnect</param>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.ReadDeviceImplementations">
            <summary>
            Determines all pluggable DeviceFamily implementations and initializes them
            </summary>
            <returns>Dictionary with all found families where the key of the collection is the name of the family</returns>
            <exception cref="T:Hbm.Api.Common.Exceptions.FamilyNameNotSetException">Thrown, if family has no name.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.FamilyNameDuplicateException">Thrown, if a family name is already registered by an other module.</exception>
        </member>
        <member name="M:Hbm.Api.Common.DaqEnvironment.Dispose(System.Boolean)">
            <summary>
            Cleans up deviceFamily and scan dependent things 
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.DaqEnvironment.Overflow">
            <summary>
            Overflow value (default is 1000000). 
            This value is used to spotlight an invalid measurement value, which usually differs between device families.
            For each measurement value, whose status is invalid, the according measurement value will be set to this overflow value.
            </summary>
            <remarks >This overflow value will be used by ALL devices!</remarks>
        </member>
        <member name="T:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo">
            <summary>
            Information for a connection to a streamable device. 
            The connection to the device is realized via the ethernet connecion information,
            an the additional properties are required for HBM streaming purposes.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo.STREAMING_PROTOCOL_NAME">
            <summary>
            Name of the daqStream protocol of the device for streaming purposes.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo.HTTP_PROTOCOL_NAME">
            <summary>
            Name of the http protocol of the device for streaming purposes.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo.STREAMING_DEFAULT_PORT">
            <summary>
            Default port for streaming purposes.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo.HTTP_DEFAULT_PORT">
            <summary>
            Default http port to the device for streaming purposes.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo.INVALID_PORT">
            <summary>
            Marks a port as invalid, because the required protocol is not available
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo.#ctor">
            <summary>
            Creates new instance
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo.#ctor(System.String,System.Int32)">
            <summary>
            Creates new instance with given parameters
            </summary>
            <param name="ipAddress">IP address of the device</param>
            <param name="port">Port for connecting the device</param>
        </member>
        <member name="M:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new instance with given parameters
            </summary>
            <param name="ipAddress">IP address of the device</param>
            <param name="port">Port for connecting the device</param>
            <param name="streamingPort">Streaming port (required for streaming)</param>
            <param name="httpPort">Http port (required for streaming)</param>
        </member>
        <member name="P:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo.StreamingPort">
            <summary>
            Port on which the daqStream protocol (for use by streaming) is running on
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo.HttpPort">
            <summary>
            Port on which the http protocol (for use by streaming) is running on
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Core.Streaming.StreamingMeasurementSignal">
            <summary>
            Decorator class for streamable measurement signals. 
            The class encapsulates a common signal and decorates it with streaming specific functionality (like setting a the streaming unique id).
            Therefore signals don't need to implement any streaming specific details (except for implementing the abstract method GetUniqueSignalID in the common signal 
            which must return the same identification string of the signal like it is used by the streaming protocol)
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Core.Streaming.StreamingSignal">
            <summary>
            Base class for streamable signals.
            Provides the streaming unique id for signals, required for streaming purposes.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingSignal.#ctor">
            <summary>
            Creates a new instance and assigns a new unique streaming id for this signal
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Core.Streaming.StreamingSignal.StreamingUniqueID">
            <summary>
            Unique streaming id for this signal
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingMeasurementSignal.#ctor(Hbm.Api.Common.Entities.Signals.Signal)">
            <summary>
            Creates a new instance and encapsulates the given signal.
            The base class constructor assigns a new (positive) unique streaming id for this signal
            </summary>
            <param name="signal"></param>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingMeasurementSignal.GetUniqueID">
            <summary>
            Returns a unique string that identifies the signal among the device to which the signal belongs.
            </summary>
            <remarks>In case of a streamable signal, this method must return the information used by the streaming to identify the signal on the hardware module.
            This information should be retrieved during scan or connect. The method implementation has to throw an cref="System.InvalidOperationException"&gt;, if no unique signal id is set.</remarks>
            <returns>Unique signal identification on the device</returns>
            <exception cref="T:System.InvalidOperationException">Thrown, if it does not contain a value.</exception>
        </member>
        <member name="P:Hbm.Api.Common.Core.Streaming.StreamingMeasurementSignal.DecoratedSignal">
            <summary>
            The encapsulated signal instance. It can be used to write the measurement results into the buffers of the signal
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Core.Streaming.StreamingIDGenerator">
            <summary>
            Generator for creating unique streaming ids as <c>int</c> values. 
            If all ids are used, it will restart with delivering the initial value.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingIDGenerator.#cctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingIDGenerator.NewID">
            <summary>
            Creates a new unique streaming id. 
            </summary>
            <returns>New generated unique id</returns>
        </member>
        <member name="T:Hbm.Api.Common.Entities.StreamingDevice">
            <summary>
            Abstract base class for devices which use the HBM streaming for data acquisition.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.StreamingDevice.#ctor">
            <summary>
            Creates an instance and assigns a unique streaming id for the device
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.StreamingDevice.SupportsPacketRateChange">
            <summary>
            Determines whether the device supports the changing of the default packet rate.
            The default for all streaming devices is <c>false</c>. 
            This method must be overridden, if the device supports this feature.
            </summary>
            <returns><c>true</c> if the packet rate may be changed, else <c>false</c>.</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.StreamingDevice.GetOverflowValue">
            <summary>
            Overflow value for the streaming device. 
            All measurement values greater or equal of this value are marked as <see cref="F:Hbm.Api.Common.Enums.MeasurementValueState.Overflow"/>
            </summary>
            <returns>Overflow value of the device</returns>
        </member>
        <member name="M:Hbm.Api.Common.Entities.StreamingDevice.PrepareDaq(System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})">
            <summary>
            Prepares a continuous measurement session.
            </summary>
            <param name="measurementSignals">The signals which will be used for the measurement.</param>     
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException"> is thrown if the device is not connected</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownSignalException"><paramref name="measurementSignals"/> contains a signal that does not belong
            to this device.</exception>
        </member>
        <member name="M:Hbm.Api.Common.Entities.StreamingDevice.BeginStartDaq">
            <summary>
            Starts an already prepared (via <c>PrepareDaq</c>) continuous measurement session
            without waiting for any reply of the device. Use this function in combination with
            <see cref="M:Hbm.Api.Common.Entities.StreamingDevice.EndStartDaq"/>
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.StreamingDevice.EndStartDaq">
            <summary>
            Ends the concurrent start of data acquisition (initiated via <see cref="M:Hbm.Api.Common.Entities.StreamingDevice.BeginStartDaq"/>)
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.StreamingDevice.ReadDaqValues">
            <summary>
            Updates the <see cref="P:Hbm.Api.Common.Entities.Signals.Signal.CircularBuffer"/> of all signals that take part in the continuous measuring.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.StreamingDevice.StopDaq">
            <summary>
            Stops a running continuous measurement session
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.StreamingDevice.ConnectToStreaming">
            <summary>
            Connect the current device to streaming and wait until the connection is finished
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.StreamingDevice.WaitUntilStreamingIsInitialized">
            <summary>
            Wait until the streaming is initialized (e.g. after connect) for this device 
            or a timeout occurs.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Entities.StreamingDevice.WaitUntilStreamingIsRunning">
            <summary>
            Wait until the streaming is running for this device 
            or a timeout occurs.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.StreamingDevice.DataRateDomain">
            <summary>
            Current data rate domain of the module. 
            This property is for internal use only. Do not change the value.
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.StreamingDevice.MinBufferTimeout">
            <summary>
            The minimum duration for which samples can be stored in the streaming buffer (in sec.)
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.StreamingDevice.StreamingUniqueID">
            <summary>
            Unique id of the device, used by streaming
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Entities.StreamingDevice.StreamingManager">
            <summary>
            StreamingManager of the device. This property is set by <see cref="T:Hbm.Api.Common.DaqMeasurement"/>
            </summary>
            <remarks>
            Attention: because of this property one device can be registered by only one <see cref="T:Hbm.Api.Common.DaqMeasurement"/> instance at one time!!</remarks>
        </member>
        <member name="P:Hbm.Api.Common.Entities.StreamingDevice.IsDaqSessionRunning">
            <summary>
            Indicates if a DAQ session is currently running or not
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Core.Streaming.StreamingManager">
            <summary>
            Encapsulates the access to the HBM streaming.
            Internally every <see cref="T:Hbm.Api.Common.Core.Streaming.StreamingManager"/> using a unique session ID, 
            so multiple parallel streaming sessions are supported.
            The streaming uses always sample rate groups (for each device separately) for measurement. 
            Therefore only one time signal is internally added for each sample rate group 
            to receive all timestamps at once for all signals of the whole group. 
            The synchronization of the signals is disabled in the streaming layer (to safe memory and time), 
            because synchronization for multiple devices is already realized in <see cref="T:Hbm.Api.Common.DaqEnvironment"/>
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.#ctor(System.Int32,System.String)">
            <summary>
            Creates an new instance
            </summary>
            <param name="dataFetchingInterval">Time interval in ms, in which measurement data is requested from all devices
            that take part in a measurement session.</param>
            <param name="logContextCategory">Category name for log context</param>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.Finalize">
            <summary>
            Destructor. Cleans up unmanaged code.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.Dispose">
            <summary>
            Disposes the current instance and fulfils cleanup operations
            </summary>
            <remarks>
            This method has a public access modifier to successfully implement
            the interface IDisposable.
            </remarks>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.Exit">
            <summary>
            Cleans up the unmanaged streaming dll for all existing streaming sessions
            </summary>
            <remarks>
            This method is static, because the cleanup is done for all existing streaming sessions
            </remarks>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.Connect(Hbm.Api.Common.Entities.StreamingDevice)">
            <summary>
            Asynchonous method to connects and register a device for streaming.
            Use method <c>IsConnected</c> to check if the device has finished connecting.
            </summary>
            <param name="device">Device to be connected and registered</param>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.Disconnect(Hbm.Api.Common.Entities.StreamingDevice)">
            <summary>
            Disconnects and unregisters a device (with all registered signals) from streaming
            </summary>
            <param name="device">Device to be disconnected and unregistered</param>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.RegisterSampleRateGroupSignal(Hbm.Api.Common.Entities.StreamingDevice,Hbm.Api.Common.Core.Streaming.StreamingSignal,System.Boolean)">
            <summary>
            Registers a signal of the given device for the sample rate group of its sample rate
            </summary>
            <param name="device">Device to which the signal belongs</param>
            <param name="signal">Signal which should be registered for streaming</param>
            <param name="isSampleRateGroupTimeSignal">Indicates, if a time signal (<c>true</c>) or a measurement signal (<c>false</c>is registered</param>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.RegisterSampleRateGroupBufferSize(Hbm.Api.Common.Entities.StreamingDevice,System.Decimal,System.UInt32)">
            <summary>
            Registers the signal buffer-size of the given device for the sample-rate group.
            </summary>
            <param name="device">Device to set the signal buffer-size for.</param>
            <param name="sampleRate">The sample rate of the sample-rate group.</param>
            <param name="minDuration">(optional) The minimum duration in which samples can be stored in the buffer. Use <see cref="P:Hbm.Api.Common.Core.Streaming.StreamingManager.MinBufferTimeout"/> property to get the minimum duration (smaller values will be ignored here).</param>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.GetDeviceGroupMinAvailableValues(Hbm.Api.Common.Entities.StreamingDevice,System.Decimal)">
            <summary>
            Reads the minimal available number of measurement values for all registered signals with the given sample for the given device 
            </summary>
            <param name="device">Device to which the signals belong</param>
            <param name="sampleRate">Sample rate of the signals to be checked</param>
            <returns>Minimal number of measurement values of all signals with the sample rate for the given device.</returns>
            <remarks>The maxiumum number of retrieved values is restricted by the constant <c>MAX_MEASUREMENT_VALUES_PER_CALL</c></remarks>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.GetMeasurementValues(Hbm.Api.Common.Entities.StreamingDevice,Hbm.Api.Common.Core.Streaming.StreamingSignal,System.Int32,System.Double[]@)">
            <summary>
            Reads the measurement values (if the signal is a measurement signal) or time stamps (if the signal is a time signal) from the signal.
            The number of <paramref name="numValues"/> values are read from the signal
            </summary>
            <param name="device">Device to which the signal belongs</param>
            <param name="signal">Signal for which the measurement values should be read</param>
            <param name="numValues">Number of values to be read from the signal</param>
            <param name="values">Array of <c>double</c> values, read from the signal</param>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.IsInitialized(Hbm.Api.Common.Entities.StreamingDevice)">
            <summary>
            Checks if the given device is initialized for streaming.
            </summary>
            <param name="device">Device to be checked</param>
            <returns><c>true</c> if the device is initialized, else <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.IsStreaming(Hbm.Api.Common.Entities.StreamingDevice)">
            <summary>
            Checks if the given device is streaming and is ready for data acquisition
            </summary>
            <param name="device">Device to be checked</param>
            <returns><c>true</c> if the device is streaming, else <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StartStreaming(Hbm.Api.Common.Entities.StreamingDevice,System.Int32)">
            <summary>
            Starts the streaming for the given device.
            The device must be connected for streaming before using this method.
            </summary>
            <param name="device">Device on which the streaming should be started</param>
            <param name="timeout">Optional timeout in ms</param>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StopStreaming(Hbm.Api.Common.Entities.StreamingDevice)">
            <summary>
            Stops the streaming for the given device (async). 
            The device remains registered for streaming.
            </summary>
            <param name="device">Device for which the streaming should be stoppped</param>
            <returns><c>true</c> if the stop request could be started, else <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.GetLastErrorText(Hbm.Api.Common.Entities.StreamingDevice)">
            <summary>
            Reads the last streaming error message for the device 
            </summary>
            <param name="device">Device for which the error message should be read</param>
            <returns>Last error message of type <c>string</c></returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.TranslateResultErrorCodes(System.Int32)">
            <summary>
            Translates streaming specific error codes in text.
            </summary>
            <param name="resultId">The streaming error code.</param>
            <returns>Short description of the error code.</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.Initialize">
            <summary>
            Initializes the unmanaged streaming dll and enables the legacy mode and async-to-sync mode for using sample rate groups.
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.CleanUp">
            <summary>
            Cleans up the unmanaged streaming dll for the current session
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.GetStateCode(Hbm.Api.Common.Entities.StreamingDevice)">
            <summary>
            Reads the current state code of the given streaming device
            </summary>
            <param name="device">Device, for which the state should be read</param>
            <returns>Current state code of the given streaming device</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.Dispose(System.Boolean)">
            <summary>
            Disposes the instance and fulfils cleanup operations
            </summary>
            <param name="isDisposing">if <c>true</c>, cleanup for managed and unmanaged resources is done, else only unmanaged resources are cleaned</param>
        </member>
        <member name="P:Hbm.Api.Common.Core.Streaming.StreamingManager.MinBufferTimeout">
            <summary>
            The minimum duration which could be stored in the ring buffer for the signal sample rate (in seconds)
            </summary>
        </member>
        <member name="P:Hbm.Api.Common.Core.Streaming.StreamingManager.LogContextMeasurementRunMgr">
            <summary>
            Share the log context for the involved streaming devices
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper">
            <summary>
            Wrapper for access to the unmanaged HBM_Streaming.dll
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.STREAMING_DLL_NAME">
            <summary>
            File name of the streaming dll
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_InitSession(System.Int32)">
            <summary>
            Initialize the streaming library. 
            This method must be called before calling any other function from the streaming library.
            </summary>
            <remarks>
            The complete streaming library is initialized when the first session is initialized,
            so no global init is required. 
            </remarks>
            <param name="sessionID">ID of the streaming session</param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_ExitSession(System.Int32)">
            <summary>
            Cleans up the streaming library for the given session.
            When this method is called, no other function from the streaming library will work for this session 
            until <see cref="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_InitSession(System.Int32)"/> is called again.
            </summary>
            <param name="sessionID">ID of the streaming session</param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_Exit">
            <summary>
            Cleans up the whole streaming library for all existing sessions.
            When this method is called, no other function from the streaming library will work.
            until an <see cref="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_InitSession(System.Int32)"/> is called again.
            </summary>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_ConnectSessionDevice(System.Int32,System.Int32,System.String,Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_Service[],System.UIntPtr,System.UInt32)">
            <summary>
            Asynchonous method to open a TCP/IP connection and add the device to the steaming device collection.
            The method <c>HBM_Stream_GetDeviceState</c> needs to be called (or polled) to determine, if the device has finished connecting.
            </summary>
            <param name="sessionID">ID of the streaming session</param>
            <param name="devId">Unique streaming id of the device. This id is required to identify the device with this <paramref name="ipAddress"/> for other streaming methods</param>
            <param name="ipAddress">IP address of the device</param>
            <param name="services">Services for the given IP address. For streaming, the port for the daqStream protocol and the http port are required 
            (if the device does not use the default ports).</param>
            <param name="countServices">Number of the services in the <paramref name="services"/> array</param>
            <param name="timeout">Optional timeout in ms</param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_DisconnectSessionDevice(System.Int32,System.Int32)">
            <summary>
            Close TCP/IP connections and remove the device (with all registered signals) from the devices collection of the steaming.
            </summary>
            <param name="sessionID">ID of the streaming session</param>
            <param name="devId">Unique streaming id of the device. This must be the same id, used for connecting the device for streaming</param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_StartSessionDevice(System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Start data acquisition on all registerd signals for the specified device.
            </summary>
            <param name="sessionID">ID of the streaming session</param>
            <param name="devId">Unique streaming id of the device. This must be the same id as used for connecting the device for streaming</param>
            <param name="trigType">0 : synchronization for signals of current device only (separated for each sample rate group); 1: synchronization for all registered signals on all devices</param>
            <param name="timeout">Optional timeout in ms</param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_StopSessionDevice(System.Int32,System.Int32)">
            <summary>
            Stop data acquisition on the specified device.
            </summary>
            <param name="sessionID">ID of the streaming session</param>
            <param name="devId">Unique streaming id of the device. This must be the same id as used for connecting the device for streaming</param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_GetSessionDeviceState(System.Int32,System.Int32)">
            <summary>
            Gets the state of the specified device (e.g. to check if the device is connected or running).
            </summary>
            <param name="sessionID">ID of the streaming session</param>
            <param name="devId">Unique streaming id of the device. This must be the same id as used for connecting the device for streaming</param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_ReadSessionDeviceErrorInfo(System.Int32,System.Int32,Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_Error@)">
            <summary>
            Reads error information from the device, including an error code an error message text.
            </summary>
            <param name="sessionID">ID of the streaming session</param>
            <param name="devId">Unique streaming id of the device. This must be the same id as used for connecting the device for streaming</param>
            <param name="errorInfo">Error information as structure of type <see cref="T:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_Error"/></param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_ChooseSessionDevicePacketRate(System.Int32,System.Int32,System.Double)">
            <summary>
            Choose the Ethernet packet rate (data fetching interval) for the specified device.
            </summary>
            <param name="sessionID">ID of the streaming session.</param>
            <param name="devId">Unique streaming ID of the device. This must be the same ID as used for connecting the device for streaming.</param>
            <param name="packetRate">Ethernet packet rate for streaming data (in seconds).</param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_EnableSessionSynchronizeAsynchronous(System.Int32)">
            <summary>
            Enables the synchronization of asynchronous signals, necessary when using sample rate groups.
            This method is necessary when using digital signals, because digital signals are asynchronous signals on the module, 
            but are treated as synchronous signals by the streaming.
            </summary>
            <param name="sessionID">ID of the streaming session</param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_SetSessionDeviceLegacyDataRateCalculation(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Enables or disables the legacy data rate calculation (HBM time) for the specified device.
            </summary>
            <remarks>
            Calling this method is required when using sample rate groups.
            </remarks>
            <param name="sessionID">ID of the streaming session</param>
            <param name="devId">Unique streaming id of the device. This must be the same id as used for connecting the device for streaming</param>
            <param name="enableLegacyDataRateCalculation">Enable (default) or disable legacy data rate calculation (optional)</param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_InitSessionDeviceGroupSignal(System.Int32,System.Int32,System.Int32,System.String,System.Double,System.Boolean)">
            <summary>
            Registers a specified signal of the device for streaming and adds it to the collection for the given sample rate.
            </summary>
            <param name="sessionID">ID of the streaming session</param>
            <param name="devId">Unique streaming id of the device. This must be the same id as used for connecting the device for streaming</param>
            <param name="sigId">Unique streaming id of the signal on the device</param>
            <param name="sigPath">Unique signal streaming reference. For real signals, it must match the value, which is stored in the module hardware. 
            For time signals, its just a unique string</param>
            <param name="sampleRate">Sample rate of the signal (in Hz)</param>
            <param name="isSampleRateGroupTimeSignal">Indicates, if the signal is a time signal for the sample rate group, defined by <paramref name="sampleRate"/></param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_GetSessionDeviceGroupMinMeasurements(System.Int32,System.Int32,System.Double)">
            <summary>
            Reads the minimum number of available measurements for the given sample rate of the device (signals and timesignals).
            </summary>
            <remarks>
            The C++ data type <c>unsigned long</c> has only 4 bytes and must be mapped to <c>UInt32</c>(<c>uint</c>) in C# (otherwise there are problems in 32-bit environments).
            </remarks>
            <param name="sessionID">ID of the streaming session</param>
            <param name="devId">Unique streaming id of the device. This must be the same id as used for connecting the device for streaming</param>
            <param name="sampleRate">Sample rate of the sample rate group (in Hz)</param>
            <returns>Number of minimal measurement values for all signals of the given sample rate groupt</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_ReadSessionDeviceSignalMeasurements(System.Int32,System.Int32,System.Int32,System.Double[],System.UInt32,System.UInt32@,System.UInt32)">
            <summary>
            Reads the measurement values (or timestamps if the signal is a time signal) for the given signal.
            </summary>
            <remarks>
            The C++ data type <c>unsigned long</c> has only 4 bytes and must be mapped to <c>UInt32</c>(<c>uint</c>) in C# (otherwise there are problems in 32-bit environments).
            </remarks>
            <param name="sessionID">ID of the streaming session</param>
            <param name="devId">Unique streaming id of the device. This must be the same id as used for connecting the device for streaming</param>
            <param name="sigId">Unique streaming id of the signal on the device. This must be the same id as used for registering the signal with <c>HBM_Stream_InitDeviceGroupSignal</c></param>
            <param name="values">Array of measurement values (or timestamp values, if the signal is a time signal)</param>
            <param name="requestedNumValues">Requested number of values to be read</param>
            <param name="numValuesRead">Real number of measurement values read from the signal. This may be less than <paramref name="requestedNumValues"/></param>
            <param name="startOffset">Optional start offset. Only required for direct access to the internal circular buffers</param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_SetSessionDeviceGroupBufferMinDuration(System.Int32,System.Int32,System.Double,System.UInt32)">
            <summary>
            Set the ring buffer minimal time duration for a specified sample rate group of the device.
            </summary>
            <param name="sessionID">ID of the streaming session</param>
            <param name="devId">Unique streaming id of the device. This must be the same id as used for connecting the device for streaming</param>
            <param name="sampleRateFreq">Sample rate frequency of the signal (in Hz).</param>
            <param name="minDuration">The minimum duration which could be stored in the ring buffer for the signal sample rate (in seconds). Giving <c>0</c> the ring buffer size will be set to the default size (30000 elements or 4 seconds).</param>
            <returns><c>0</c> for success, else error code</returns>
        </member>
        <member name="T:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_Service">
            <summary>
            Defines a streaming service.
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_Service.Type">
            <summary>
            Service type (fixed size)
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_Service.Port">
            <summary>
            Service port
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_Error">
            <summary>
            Defines a streaming error message. 
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_Error.Code">
            <summary>
            Error code
            </summary>
        </member>
        <member name="F:Hbm.Api.Common.Core.Streaming.StreamingManager.StreamingDllWrapper.HBM_Stream_Error.Message">
            <summary>
            Error message text (fixed size)
            </summary>
        </member>
        <member name="T:Hbm.Api.Common.Core.Streaming.StreamingTimeSignal">
            <summary>
            Represents a time signal used for streaming.
            A time signal may be used for signals with or without sample rate groups
            </summary>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingTimeSignal.#ctor">
            <summary>
            Creates an new instance and assigns a new (negative) unique streaming id for this time signal
            </summary>
            <remarks>
            This constructor is used for creating time signals without sample rate groups, e.g. for CAN signals
            </remarks>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingTimeSignal.#ctor(System.Decimal)">
            <summary>
            Creates an new instance for the given sample rate group and assigns a new (negative) unique streaming id for this signal
            </summary>
            <param name="sampleRate">sample rate of the sample rate group</param>
            <remarks>
            This constructor is used for creating time signals which belongs to sample rate groups
            </remarks>
        </member>
        <member name="M:Hbm.Api.Common.Core.Streaming.StreamingTimeSignal.GetUniqueID">
            <summary>
            Returns a unique string that identifies the signal among the device to which the signal belongs.
            </summary>
            <remarks>In case of a streamable signal, this method must return the information used by the streaming to identify the signal on the hardware module.
            This information should be retrieved during scan or connect. The method implementation has to throw an cref="System.InvalidOperationException"&gt;, if no unique signal id is set.</remarks>
            <returns>Unique signal identification on the device</returns>
            <exception cref="T:System.InvalidOperationException">Thrown, if it does not contain a value.</exception>
        </member>
    </members>
</doc>
